
TCU_SD_Logging_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800794c  0800794c  0000894c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e24  08007e24  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e24  08007e24  00008e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e2c  08007e2c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e2c  08007e2c  00008e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e30  08007e30  00008e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007e34  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000905c  2**0
                  CONTENTS
 10 .bss          00002320  2000005c  2000005c  0000905c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000237c  2000237c  0000905c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c77  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028fa  00000000  00000000  00019d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  0001c600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b43  00000000  00000000  0001d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002383d  00000000  00000000  0001dfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139c6  00000000  00000000  00041828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce7b7  00000000  00000000  000551ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001239a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000416c  00000000  00000000  001239e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00127b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007934 	.word	0x08007934

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007934 	.word	0x08007934

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fe29 	bl	80001d0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29a      	uxth	r2, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <Send_Uart+0x28>)
 800058a:	f002 ff3f 	bl	800340c <HAL_UART_Transmit>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200021a8 	.word	0x200021a8

0800059c <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	4812      	ldr	r0, [pc, #72]	@ (80005f4 <Mount_SD+0x58>)
 80005aa:	f006 f833 	bl	8006614 <f_mount>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <Mount_SD+0x5c>)
 80005b4:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK) {
 80005b6:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <Mount_SD+0x5c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d012      	beq.n	80005e4 <Mount_SD+0x48>
//		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
		char *buf = malloc(100*sizeof(char));
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f006 fd08 	bl	8006fd4 <malloc>
 80005c4:	4603      	mov	r3, r0
 80005c6:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "Mounting Error: %d\n\n", (int) fresult);
 80005c8:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <Mount_SD+0x5c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	490b      	ldr	r1, [pc, #44]	@ (80005fc <Mount_SD+0x60>)
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f006 fdbd 	bl	8007150 <siprintf>
		Send_Uart (buf);
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f7ff ffca 	bl	8000570 <Send_Uart>
	    free(buf);
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f006 fd01 	bl	8006fe4 <free>
	} else {
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 80005e2:	e002      	b.n	80005ea <Mount_SD+0x4e>
		Send_Uart("SD CARD mounted successfully...\n");
 80005e4:	4806      	ldr	r0, [pc, #24]	@ (8000600 <Mount_SD+0x64>)
 80005e6:	f7ff ffc3 	bl	8000570 <Send_Uart>
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000078 	.word	0x20000078
 80005f8:	200020f4 	.word	0x200020f4
 80005fc:	0800794c 	.word	0x0800794c
 8000600:	08007964 	.word	0x08007964

08000604 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	2000      	movs	r0, #0
 8000612:	f005 ffff 	bl	8006614 <f_mount>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <Unmount_SD+0x38>)
 800061c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800061e:	4b07      	ldr	r3, [pc, #28]	@ (800063c <Unmount_SD+0x38>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <Unmount_SD+0x2a>
 8000626:	4806      	ldr	r0, [pc, #24]	@ (8000640 <Unmount_SD+0x3c>)
 8000628:	f7ff ffa2 	bl	8000570 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 800062c:	e002      	b.n	8000634 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <Unmount_SD+0x40>)
 8000630:	f7ff ff9e 	bl	8000570 <Send_Uart>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200020f4 	.word	0x200020f4
 8000640:	08007988 	.word	0x08007988
 8000644:	080079b0 	.word	0x080079b0

08000648 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000650:	4942      	ldr	r1, [pc, #264]	@ (800075c <Create_File+0x114>)
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f006 fc28 	bl	8006ea8 <f_stat>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	4b40      	ldr	r3, [pc, #256]	@ (8000760 <Create_File+0x118>)
 800065e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000660:	4b3f      	ldr	r3, [pc, #252]	@ (8000760 <Create_File+0x118>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d111      	bne.n	800068c <Create_File+0x44>
	{
		char *buf = malloc(100*sizeof(char));
 8000668:	2064      	movs	r0, #100	@ 0x64
 800066a:	f006 fcb3 	bl	8006fd4 <malloc>
 800066e:	4603      	mov	r3, r0
 8000670:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	493b      	ldr	r1, [pc, #236]	@ (8000764 <Create_File+0x11c>)
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f006 fd6a 	bl	8007150 <siprintf>
		Send_Uart(buf);
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f7ff ff77 	bl	8000570 <Send_Uart>
		free(buf);
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f006 fcae 	bl	8006fe4 <free>
	    return 2; //modified from 0 to indicate an error instead
 8000688:	2302      	movs	r3, #2
 800068a:	e063      	b.n	8000754 <Create_File+0x10c>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800068c:	220b      	movs	r2, #11
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	4835      	ldr	r0, [pc, #212]	@ (8000768 <Create_File+0x120>)
 8000692:	f006 f805 	bl	80066a0 <f_open>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <Create_File+0x118>)
 800069c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800069e:	4b30      	ldr	r3, [pc, #192]	@ (8000760 <Create_File+0x118>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d015      	beq.n	80006d2 <Create_File+0x8a>
		{
			char *buf = malloc(100*sizeof(char));
 80006a6:	2064      	movs	r0, #100	@ 0x64
 80006a8:	f006 fc94 	bl	8006fd4 <malloc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <Create_File+0x118>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	492c      	ldr	r1, [pc, #176]	@ (800076c <Create_File+0x124>)
 80006ba:	6938      	ldr	r0, [r7, #16]
 80006bc:	f006 fd48 	bl	8007150 <siprintf>
			Send_Uart(buf);
 80006c0:	6938      	ldr	r0, [r7, #16]
 80006c2:	f7ff ff55 	bl	8000570 <Send_Uart>
			free(buf);
 80006c6:	6938      	ldr	r0, [r7, #16]
 80006c8:	f006 fc8c 	bl	8006fe4 <free>
		    return fresult;
 80006cc:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <Create_File+0x118>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	e040      	b.n	8000754 <Create_File+0x10c>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80006d2:	2064      	movs	r0, #100	@ 0x64
 80006d4:	f006 fc7e 	bl	8006fd4 <malloc>
 80006d8:	4603      	mov	r3, r0
 80006da:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4924      	ldr	r1, [pc, #144]	@ (8000770 <Create_File+0x128>)
 80006e0:	69f8      	ldr	r0, [r7, #28]
 80006e2:	f006 fd35 	bl	8007150 <siprintf>
			Send_Uart(buf);
 80006e6:	69f8      	ldr	r0, [r7, #28]
 80006e8:	f7ff ff42 	bl	8000570 <Send_Uart>
			free(buf);
 80006ec:	69f8      	ldr	r0, [r7, #28]
 80006ee:	f006 fc79 	bl	8006fe4 <free>
		}

		fresult = f_close(&fil);
 80006f2:	481d      	ldr	r0, [pc, #116]	@ (8000768 <Create_File+0x120>)
 80006f4:	f006 fbae 	bl	8006e54 <f_close>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <Create_File+0x118>)
 80006fe:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <Create_File+0x118>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d013      	beq.n	8000730 <Create_File+0xe8>
		{
			char *buf = malloc(100*sizeof(char));
 8000708:	2064      	movs	r0, #100	@ 0x64
 800070a:	f006 fc63 	bl	8006fd4 <malloc>
 800070e:	4603      	mov	r3, r0
 8000710:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <Create_File+0x118>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4916      	ldr	r1, [pc, #88]	@ (8000774 <Create_File+0x12c>)
 800071c:	6978      	ldr	r0, [r7, #20]
 800071e:	f006 fd17 	bl	8007150 <siprintf>
			Send_Uart(buf);
 8000722:	6978      	ldr	r0, [r7, #20]
 8000724:	f7ff ff24 	bl	8000570 <Send_Uart>
			free(buf);
 8000728:	6978      	ldr	r0, [r7, #20]
 800072a:	f006 fc5b 	bl	8006fe4 <free>
 800072e:	e00f      	b.n	8000750 <Create_File+0x108>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f006 fc4f 	bl	8006fd4 <malloc>
 8000736:	4603      	mov	r3, r0
 8000738:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	490e      	ldr	r1, [pc, #56]	@ (8000778 <Create_File+0x130>)
 800073e:	69b8      	ldr	r0, [r7, #24]
 8000740:	f006 fd06 	bl	8007150 <siprintf>
			Send_Uart(buf);
 8000744:	69b8      	ldr	r0, [r7, #24]
 8000746:	f7ff ff13 	bl	8000570 <Send_Uart>
			free(buf);
 800074a:	69b8      	ldr	r0, [r7, #24]
 800074c:	f006 fc4a 	bl	8006fe4 <free>
		}
	}
    return fresult;
 8000750:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <Create_File+0x118>)
 8000752:	781b      	ldrb	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200020dc 	.word	0x200020dc
 8000760:	200020f4 	.word	0x200020f4
 8000764:	08007adc 	.word	0x08007adc
 8000768:	200010ac 	.word	0x200010ac
 800076c:	08007b14 	.word	0x08007b14
 8000770:	08007b3c 	.word	0x08007b3c
 8000774:	08007b7c 	.word	0x08007b7c
 8000778:	08007abc 	.word	0x08007abc

0800077c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000786:	491c      	ldr	r1, [pc, #112]	@ (80007f8 <Update_File+0x7c>)
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f006 fb8d 	bl	8006ea8 <f_stat>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <Update_File+0x80>)
 8000794:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <Update_File+0x80>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d002      	beq.n	80007a4 <Update_File+0x28>
	{
//		char *buf = malloc(100*sizeof(char));
//		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
//		Send_Uart (buf);
//		free(buf);
	    return fresult;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <Update_File+0x80>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	e025      	b.n	80007f0 <Update_File+0x74>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80007a4:	2232      	movs	r2, #50	@ 0x32
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	4815      	ldr	r0, [pc, #84]	@ (8000800 <Update_File+0x84>)
 80007aa:	f005 ff79 	bl	80066a0 <f_open>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <Update_File+0x80>)
 80007b4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <Update_File+0x80>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <Update_File+0x48>
	    {
//	    	char *buf = malloc(100*sizeof(char));
//	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
//	    	Send_Uart(buf);
//	        free(buf);
	        return fresult;
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <Update_File+0x80>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	e015      	b.n	80007f0 <Update_File+0x74>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80007c4:	6838      	ldr	r0, [r7, #0]
 80007c6:	f7ff fd03 	bl	80001d0 <strlen>
 80007ca:	4602      	mov	r2, r0
 80007cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <Update_File+0x88>)
 80007ce:	6839      	ldr	r1, [r7, #0]
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <Update_File+0x84>)
 80007d2:	f006 f92d 	bl	8006a30 <f_write>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <Update_File+0x80>)
 80007dc:	701a      	strb	r2, [r3, #0]
//	    	Send_Uart(buf);
//	    	free(buf);
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80007de:	4808      	ldr	r0, [pc, #32]	@ (8000800 <Update_File+0x84>)
 80007e0:	f006 fb38 	bl	8006e54 <f_close>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <Update_File+0x80>)
 80007ea:	701a      	strb	r2, [r3, #0]
//	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
//	    	Send_Uart(buf);
//	    	free(buf);
	     }
	}
    return fresult;
 80007ec:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <Update_File+0x80>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200020dc 	.word	0x200020dc
 80007fc:	200020f4 	.word	0x200020f4
 8000800:	200010ac 	.word	0x200010ac
 8000804:	200020f8 	.word	0x200020f8

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0a0      	sub	sp, #128	@ 0x80
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f000 fb5f 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f857 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f000 f94f 	bl	8000ab8 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 800081a:	f000 f8f3 	bl	8000a04 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800081e:	f003 ff25 	bl	800466c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000822:	f000 f91f 	bl	8000a64 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000826:	f000 f8b7 	bl	8000998 <MX_CAN1_Init>
//	}


  // file names might be all caps, see:
  // https://superuser.com/questions/1297658/folder-names-become-uppercase-when-syncing-to-fat32-drive
  Mount_SD("/");
 800082a:	4823      	ldr	r0, [pc, #140]	@ (80008b8 <main+0xb0>)
 800082c:	f7ff feb6 	bl	800059c <Mount_SD>
  FRESULT res = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint8_t fileidx = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
  char filename[12];

  while (res != FR_OK) {
 800083c:	e014      	b.n	8000868 <main+0x60>
	  sprintf(filename, "LOGS%d.TXT", (int) fileidx);
 800083e:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000842:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000846:	491d      	ldr	r1, [pc, #116]	@ (80008bc <main+0xb4>)
 8000848:	4618      	mov	r0, r3
 800084a:	f006 fc81 	bl	8007150 <siprintf>
	  res = Create_File(filename);
 800084e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fef8 	bl	8000648 <Create_File>
 8000858:	4603      	mov	r3, r0
 800085a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  fileidx++;
 800085e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000862:	3301      	adds	r3, #1
 8000864:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
  while (res != FR_OK) {
 8000868:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1e6      	bne.n	800083e <main+0x36>
  }

  uint32_t count = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	67bb      	str	r3, [r7, #120]	@ 0x78
  // FRESULT result;
  uint32_t startTick = HAL_GetTick();
 8000874:	f000 fb92 	bl	8000f9c <HAL_GetTick>
 8000878:	6778      	str	r0, [r7, #116]	@ 0x74

  // spam writes for 3 seconds
  while (HAL_GetTick() - startTick < 3000)
 800087a:	e00f      	b.n	800089c <main+0x94>
  {
	  //	  char buf[20];
	  //	  sprintf (buf, "fifo0: %d\n", fifo0);
	  //	  HAL_UART_Transmit(&huart1, buf, strlen (buf), HAL_MAX_DELAY);
	  	  char buffer[100];
	  	  sprintf(buffer, "%d 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\n", (int) count);
 800087c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	490f      	ldr	r1, [pc, #60]	@ (80008c0 <main+0xb8>)
 8000882:	4618      	mov	r0, r3
 8000884:	f006 fc64 	bl	8007150 <siprintf>
	  	  Update_File(filename, buffer);
 8000888:	1d3a      	adds	r2, r7, #4
 800088a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff73 	bl	800077c <Update_File>
	  	  count++;
 8000896:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000898:	3301      	adds	r3, #1
 800089a:	67bb      	str	r3, [r7, #120]	@ 0x78
  while (HAL_GetTick() - startTick < 3000)
 800089c:	f000 fb7e 	bl	8000f9c <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d9e6      	bls.n	800087c <main+0x74>
  }
  Unmount_SD("/");
 80008ae:	4802      	ldr	r0, [pc, #8]	@ (80008b8 <main+0xb0>)
 80008b0:	f7ff fea8 	bl	8000604 <Unmount_SD>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1) {
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <main+0xac>
 80008b8:	08007c90 	.word	0x08007c90
 80008bc:	08007c94 	.word	0x08007c94
 80008c0:	08007ca0 	.word	0x08007ca0

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	@ 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f006 fc5c 	bl	8007190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a27      	ldr	r2, [pc, #156]	@ (8000990 <SystemClock_Config+0xcc>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <SystemClock_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <SystemClock_Config+0xd0>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	2310      	movs	r3, #16
 800092a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092c:	2302      	movs	r3, #2
 800092e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000930:	2300      	movs	r3, #0
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000934:	2308      	movs	r3, #8
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000938:	2350      	movs	r3, #80	@ 0x50
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fed5 	bl	80016f8 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000954:	f000 f8f4 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000964:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f001 f936 	bl	8001be8 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000982:	f000 f8dd 	bl	8000b40 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	@ 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_CAN1_Init+0x64>)
 800099e:	4a18      	ldr	r2, [pc, #96]	@ (8000a00 <MX_CAN1_Init+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009b6:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80009ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_CAN1_Init+0x64>)
 80009e8:	f000 fb08 	bl	8000ffc <HAL_CAN_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80009f2:	f000 f8a5 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200020fc 	.word	0x200020fc
 8000a00:	40006400 	.word	0x40006400

08000a04 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_SDIO_SD_Init+0x58>)
 8000a0a:	4a15      	ldr	r2, [pc, #84]	@ (8000a60 <MX_SDIO_SD_Init+0x5c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <MX_SDIO_SD_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_SDIO_SD_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <MX_SDIO_SD_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_SDIO_SD_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <MX_SDIO_SD_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MX_SDIO_SD_Init+0x58>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000a32:	480a      	ldr	r0, [pc, #40]	@ (8000a5c <MX_SDIO_SD_Init+0x58>)
 8000a34:	f001 faf8 	bl	8002028 <HAL_SD_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000a3e:	f000 f87f 	bl	8000b40 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000a42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_SDIO_SD_Init+0x58>)
 8000a48:	f002 f8e2 	bl	8002c10 <HAL_SD_ConfigWideBusOperation>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000a52:	f000 f875 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE END SDIO_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20002124 	.word	0x20002124
 8000a60:	40012c00 	.word	0x40012c00

08000a64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <MX_USART1_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	f002 fc66 	bl	800336c <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f000 f84b 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200021a8 	.word	0x200021a8
 8000ab4:	40011000 	.word	0x40011000

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_GPIO_Init+0x84>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <HAL_CAN_MspInit+0x84>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12b      	bne.n	8000c16 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <HAL_CAN_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <HAL_CAN_MspInit+0x88>)
 8000bc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_CAN_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <HAL_CAN_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a10      	ldr	r2, [pc, #64]	@ (8000c24 <HAL_CAN_MspInit+0x88>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_CAN_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c06:	2309      	movs	r3, #9
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <HAL_CAN_MspInit+0x8c>)
 8000c12:	f000 fbd5 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	@ 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40006400 	.word	0x40006400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a28      	ldr	r2, [pc, #160]	@ (8000cec <HAL_SD_MspInit+0xc0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d14a      	bne.n	8000ce4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <HAL_SD_MspInit+0xc4>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	4a26      	ldr	r2, [pc, #152]	@ (8000cf0 <HAL_SD_MspInit+0xc4>)
 8000c58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5e:	4b24      	ldr	r3, [pc, #144]	@ (8000cf0 <HAL_SD_MspInit+0xc4>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <HAL_SD_MspInit+0xc4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf0 <HAL_SD_MspInit+0xc4>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <HAL_SD_MspInit+0xc4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_SD_MspInit+0xc4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a18      	ldr	r2, [pc, #96]	@ (8000cf0 <HAL_SD_MspInit+0xc4>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_SD_MspInit+0xc4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000ca2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <HAL_SD_MspInit+0xc8>)
 8000cc0:	f000 fb7e 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <HAL_SD_MspInit+0xcc>)
 8000ce0:	f000 fb6e 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	@ 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40012c00 	.word	0x40012c00
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	@ (8000d80 <HAL_UART_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12c      	bne.n	8000d78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a17      	ldr	r2, [pc, #92]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_UART_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <HAL_UART_MspInit+0x8c>)
 8000d74:	f000 fb24 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	@ 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40011000 	.word	0x40011000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <NMI_Handler+0x4>

08000d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <MemManage_Handler+0x4>

08000da4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f000 f8c7 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f006 f9d0 	bl	80071c0 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20020000 	.word	0x20020000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	200021f0 	.word	0x200021f0
 8000e54:	20002380 	.word	0x20002380

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e80:	f7ff ffea 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	@ (8000ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f006 f98f 	bl	80071cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fcab 	bl	8000808 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ec0:	08007e34 	.word	0x08007e34
  ldr r2, =_sbss
 8000ec4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ec8:	2000237c 	.word	0x2000237c

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 fa2d 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fe22 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fa37 	bl	80013a6 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 fa0d 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	@ (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	200021f4 	.word	0x200021f4

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	@ (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200021f4 	.word	0x200021f4

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffde 	bl	8000f9c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008

08000ffc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0ed      	b.n	80011ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fdbe 	bl	8000b9c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001030:	f7ff ffb4 	bl	8000f9c <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001036:	e012      	b.n	800105e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001038:	f7ff ffb0 	bl	8000f9c <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d90b      	bls.n	800105e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2205      	movs	r2, #5
 8001056:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0c5      	b.n	80011ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0e5      	beq.n	8001038 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0202 	bic.w	r2, r2, #2
 800107a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800107c:	f7ff ff8e 	bl	8000f9c <HAL_GetTick>
 8001080:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001082:	e012      	b.n	80010aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001084:	f7ff ff8a 	bl	8000f9c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b0a      	cmp	r3, #10
 8001090:	d90b      	bls.n	80010aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001096:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2205      	movs	r2, #5
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e09f      	b.n	80011ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e5      	bne.n	8001084 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e1b      	ldrb	r3, [r3, #24]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d108      	bne.n	80010d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7e5b      	ldrb	r3, [r3, #25]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d108      	bne.n	80010fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e007      	b.n	800110c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800110a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7e9b      	ldrb	r3, [r3, #26]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0220 	orr.w	r2, r2, #32
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e007      	b.n	8001136 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0220 	bic.w	r2, r2, #32
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7edb      	ldrb	r3, [r3, #27]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0210 	bic.w	r2, r2, #16
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e007      	b.n	8001160 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0210 	orr.w	r2, r2, #16
 800115e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7f1b      	ldrb	r3, [r3, #28]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0208 	orr.w	r2, r2, #8
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e007      	b.n	800118a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0208 	bic.w	r2, r2, #8
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7f5b      	ldrb	r3, [r3, #29]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0204 	orr.w	r2, r2, #4
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0204 	bic.w	r2, r2, #4
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	ea42 0103 	orr.w	r1, r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	@ (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	@ (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	@ 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	@ 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff47 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5c 	bl	800123c <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff8e 	bl	80012ac <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb0 	bl	8001314 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e16b      	b.n	80016b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	f040 815a 	bne.w	80016ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d005      	beq.n	8001412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	2b02      	cmp	r3, #2
 8001410:	d130      	bne.n	8001474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001448:	2201      	movs	r2, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 0201 	and.w	r2, r3, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b03      	cmp	r3, #3
 800147e:	d017      	beq.n	80014b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d123      	bne.n	8001504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	69b9      	ldr	r1, [r7, #24]
 8001500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0203 	and.w	r2, r3, #3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80b4 	beq.w	80016ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b60      	ldr	r3, [pc, #384]	@ (80016cc <HAL_GPIO_Init+0x30c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	4a5f      	ldr	r2, [pc, #380]	@ (80016cc <HAL_GPIO_Init+0x30c>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001554:	6453      	str	r3, [r2, #68]	@ 0x44
 8001556:	4b5d      	ldr	r3, [pc, #372]	@ (80016cc <HAL_GPIO_Init+0x30c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001562:	4a5b      	ldr	r2, [pc, #364]	@ (80016d0 <HAL_GPIO_Init+0x310>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a52      	ldr	r2, [pc, #328]	@ (80016d4 <HAL_GPIO_Init+0x314>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d02b      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a51      	ldr	r2, [pc, #324]	@ (80016d8 <HAL_GPIO_Init+0x318>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x222>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a50      	ldr	r2, [pc, #320]	@ (80016dc <HAL_GPIO_Init+0x31c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x21e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4f      	ldr	r2, [pc, #316]	@ (80016e0 <HAL_GPIO_Init+0x320>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x21a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4e      	ldr	r2, [pc, #312]	@ (80016e4 <HAL_GPIO_Init+0x324>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x216>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4d      	ldr	r2, [pc, #308]	@ (80016e8 <HAL_GPIO_Init+0x328>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x212>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4c      	ldr	r2, [pc, #304]	@ (80016ec <HAL_GPIO_Init+0x32c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x20e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4b      	ldr	r2, [pc, #300]	@ (80016f0 <HAL_GPIO_Init+0x330>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x20a>
 80015c6:	2307      	movs	r3, #7
 80015c8:	e00e      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015ca:	2308      	movs	r3, #8
 80015cc:	e00c      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015ce:	2306      	movs	r3, #6
 80015d0:	e00a      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x228>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	@ (80016d0 <HAL_GPIO_Init+0x310>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b3b      	ldr	r3, [pc, #236]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162a:	4a32      	ldr	r2, [pc, #200]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001630:	4b30      	ldr	r3, [pc, #192]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001654:	4a27      	ldr	r2, [pc, #156]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165a:	4b26      	ldr	r3, [pc, #152]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167e:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a8:	4a12      	ldr	r2, [pc, #72]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f ae90 	bls.w	80013dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40021400 	.word	0x40021400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40021c00 	.word	0x40021c00
 80016f4:	40013c00 	.word	0x40013c00

080016f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e267      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d075      	beq.n	8001802 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001716:	4b88      	ldr	r3, [pc, #544]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b04      	cmp	r3, #4
 8001720:	d00c      	beq.n	800173c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001722:	4b85      	ldr	r3, [pc, #532]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800172a:	2b08      	cmp	r3, #8
 800172c:	d112      	bne.n	8001754 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172e:	4b82      	ldr	r3, [pc, #520]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001736:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800173a:	d10b      	bne.n	8001754 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	4b7e      	ldr	r3, [pc, #504]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d05b      	beq.n	8001800 <HAL_RCC_OscConfig+0x108>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d157      	bne.n	8001800 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e242      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800175c:	d106      	bne.n	800176c <HAL_RCC_OscConfig+0x74>
 800175e:	4b76      	ldr	r3, [pc, #472]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a75      	ldr	r2, [pc, #468]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e01d      	b.n	80017a8 <HAL_RCC_OscConfig+0xb0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x98>
 8001776:	4b70      	ldr	r3, [pc, #448]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6f      	ldr	r2, [pc, #444]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 800177c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b6d      	ldr	r3, [pc, #436]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6c      	ldr	r2, [pc, #432]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0xb0>
 8001790:	4b69      	ldr	r3, [pc, #420]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a68      	ldr	r2, [pc, #416]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b66      	ldr	r3, [pc, #408]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a65      	ldr	r2, [pc, #404]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d013      	beq.n	80017d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fbf4 	bl	8000f9c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fbf0 	bl	8000f9c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	@ 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e207      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0xc0>
 80017d6:	e014      	b.n	8001802 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fbe0 	bl	8000f9c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fbdc 	bl	8000f9c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	@ 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e1f3      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	4b51      	ldr	r3, [pc, #324]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0xe8>
 80017fe:	e000      	b.n	8001802 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d063      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800180e:	4b4a      	ldr	r3, [pc, #296]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181a:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001822:	2b08      	cmp	r3, #8
 8001824:	d11c      	bne.n	8001860 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b44      	ldr	r3, [pc, #272]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d116      	bne.n	8001860 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <HAL_RCC_OscConfig+0x152>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d001      	beq.n	800184a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e1c7      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4937      	ldr	r1, [pc, #220]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	e03a      	b.n	80018d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d020      	beq.n	80018aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001868:	4b34      	ldr	r3, [pc, #208]	@ (800193c <HAL_RCC_OscConfig+0x244>)
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7ff fb95 	bl	8000f9c <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff fb91 	bl	8000f9c <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1a8      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b28      	ldr	r3, [pc, #160]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4925      	ldr	r1, [pc, #148]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
 80018a8:	e015      	b.n	80018d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018aa:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_RCC_OscConfig+0x244>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb74 	bl	8000f9c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b8:	f7ff fb70 	bl	8000f9c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e187      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d036      	beq.n	8001950 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d016      	beq.n	8001918 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <HAL_RCC_OscConfig+0x248>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f0:	f7ff fb54 	bl	8000f9c <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f8:	f7ff fb50 	bl	8000f9c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e167      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_RCC_OscConfig+0x240>)
 800190c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x200>
 8001916:	e01b      	b.n	8001950 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_RCC_OscConfig+0x248>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff fb3d 	bl	8000f9c <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	e00e      	b.n	8001944 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff fb39 	bl	8000f9c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d907      	bls.n	8001944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e150      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
 8001938:	40023800 	.word	0x40023800
 800193c:	42470000 	.word	0x42470000
 8001940:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	4b88      	ldr	r3, [pc, #544]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ea      	bne.n	8001926 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 8097 	beq.w	8001a8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001962:	4b81      	ldr	r3, [pc, #516]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10f      	bne.n	800198e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b7d      	ldr	r3, [pc, #500]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	4a7c      	ldr	r2, [pc, #496]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	@ 0x40
 800197e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b77      	ldr	r3, [pc, #476]	@ (8001b6c <HAL_RCC_OscConfig+0x474>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b74      	ldr	r3, [pc, #464]	@ (8001b6c <HAL_RCC_OscConfig+0x474>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a73      	ldr	r2, [pc, #460]	@ (8001b6c <HAL_RCC_OscConfig+0x474>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff faf9 	bl	8000f9c <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7ff faf5 	bl	8000f9c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e10c      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b6c <HAL_RCC_OscConfig+0x474>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x2ea>
 80019d4:	4b64      	ldr	r3, [pc, #400]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d8:	4a63      	ldr	r2, [pc, #396]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6713      	str	r3, [r2, #112]	@ 0x70
 80019e0:	e01c      	b.n	8001a1c <HAL_RCC_OscConfig+0x324>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x30c>
 80019ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0x324>
 8001a04:	4b58      	ldr	r3, [pc, #352]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a08:	4a57      	ldr	r2, [pc, #348]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a10:	4b55      	ldr	r3, [pc, #340]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a14:	4a54      	ldr	r2, [pc, #336]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f023 0304 	bic.w	r3, r3, #4
 8001a1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d015      	beq.n	8001a50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff faba 	bl	8000f9c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fab6 	bl	8000f9c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e0cb      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a42:	4b49      	ldr	r3, [pc, #292]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0ee      	beq.n	8001a2c <HAL_RCC_OscConfig+0x334>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff faa4 	bl	8000f9c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff faa0 	bl	8000f9c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0b5      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ee      	bne.n	8001a58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a7a:	7dfb      	ldrb	r3, [r7, #23]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a80:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	4a38      	ldr	r2, [pc, #224]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a1 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a96:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d05c      	beq.n	8001b5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d141      	bne.n	8001b2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <HAL_RCC_OscConfig+0x478>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fa74 	bl	8000f9c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff fa70 	bl	8000f9c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e087      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	019b      	lsls	r3, r3, #6
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	3b01      	subs	r3, #1
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	061b      	lsls	r3, r3, #24
 8001afa:	491b      	ldr	r1, [pc, #108]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b00:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <HAL_RCC_OscConfig+0x478>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7ff fa49 	bl	8000f9c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff fa45 	bl	8000f9c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e05c      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x416>
 8001b2c:	e054      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <HAL_RCC_OscConfig+0x478>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fa32 	bl	8000f9c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff fa2e 	bl	8000f9c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e045      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_RCC_OscConfig+0x470>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x444>
 8001b5a:	e03d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e038      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_RCC_OscConfig+0x4ec>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d028      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d121      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d11a      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001baa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d111      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0cc      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b68      	ldr	r3, [pc, #416]	@ (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d90c      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b65      	ldr	r3, [pc, #404]	@ (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b63      	ldr	r3, [pc, #396]	@ (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0b8      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c3c:	4b59      	ldr	r3, [pc, #356]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4a58      	ldr	r2, [pc, #352]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c54:	4b53      	ldr	r3, [pc, #332]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a52      	ldr	r2, [pc, #328]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c60:	4b50      	ldr	r3, [pc, #320]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	494d      	ldr	r1, [pc, #308]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d044      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b47      	ldr	r3, [pc, #284]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d119      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e07f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e06f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e067      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc6:	4b37      	ldr	r3, [pc, #220]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4934      	ldr	r1, [pc, #208]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd8:	f7ff f960 	bl	8000f9c <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce0:	f7ff f95c 	bl	8000f9c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e04f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 020c 	and.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1eb      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d08:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d20c      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e032      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3c:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4916      	ldr	r1, [pc, #88]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	490e      	ldr	r1, [pc, #56]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d6e:	f000 f821 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	490a      	ldr	r1, [pc, #40]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	4a09      	ldr	r2, [pc, #36]	@ (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f8c0 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00
 8001da4:	40023800 	.word	0x40023800
 8001da8:	08007d44 	.word	0x08007d44
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000004 	.word	0x20000004

08001db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001db8:	b094      	sub	sp, #80	@ 0x50
 8001dba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dcc:	4b79      	ldr	r3, [pc, #484]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d00d      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x40>
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	f200 80e1 	bhi.w	8001fa0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x34>
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d003      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0x3a>
 8001de6:	e0db      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b73      	ldr	r3, [pc, #460]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001dec:	e0db      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dee:	4b73      	ldr	r3, [pc, #460]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x208>)
 8001df0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001df2:	e0d8      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df4:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d063      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	099b      	lsrs	r3, r3, #6
 8001e10:	2200      	movs	r2, #0
 8001e12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e1e:	2300      	movs	r3, #0
 8001e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e26:	4622      	mov	r2, r4
 8001e28:	462b      	mov	r3, r5
 8001e2a:	f04f 0000 	mov.w	r0, #0
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	0159      	lsls	r1, r3, #5
 8001e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e38:	0150      	lsls	r0, r2, #5
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4621      	mov	r1, r4
 8001e40:	1a51      	subs	r1, r2, r1
 8001e42:	6139      	str	r1, [r7, #16]
 8001e44:	4629      	mov	r1, r5
 8001e46:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e58:	4659      	mov	r1, fp
 8001e5a:	018b      	lsls	r3, r1, #6
 8001e5c:	4651      	mov	r1, sl
 8001e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e62:	4651      	mov	r1, sl
 8001e64:	018a      	lsls	r2, r1, #6
 8001e66:	4651      	mov	r1, sl
 8001e68:	ebb2 0801 	subs.w	r8, r2, r1
 8001e6c:	4659      	mov	r1, fp
 8001e6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e86:	4690      	mov	r8, r2
 8001e88:	4699      	mov	r9, r3
 8001e8a:	4623      	mov	r3, r4
 8001e8c:	eb18 0303 	adds.w	r3, r8, r3
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	462b      	mov	r3, r5
 8001e94:	eb49 0303 	adc.w	r3, r9, r3
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	024b      	lsls	r3, r1, #9
 8001eaa:	4621      	mov	r1, r4
 8001eac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	024a      	lsls	r2, r1, #9
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eba:	2200      	movs	r2, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ec0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ec4:	f7fe f9dc 	bl	8000280 <__aeabi_uldivmod>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ed0:	e058      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed2:	4b38      	ldr	r3, [pc, #224]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	099b      	lsrs	r3, r3, #6
 8001ed8:	2200      	movs	r2, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	4611      	mov	r1, r2
 8001ede:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001eec:	4642      	mov	r2, r8
 8001eee:	464b      	mov	r3, r9
 8001ef0:	f04f 0000 	mov.w	r0, #0
 8001ef4:	f04f 0100 	mov.w	r1, #0
 8001ef8:	0159      	lsls	r1, r3, #5
 8001efa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001efe:	0150      	lsls	r0, r2, #5
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4641      	mov	r1, r8
 8001f06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f0a:	4649      	mov	r1, r9
 8001f0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f24:	ebb2 040a 	subs.w	r4, r2, sl
 8001f28:	eb63 050b 	sbc.w	r5, r3, fp
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	00eb      	lsls	r3, r5, #3
 8001f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f3a:	00e2      	lsls	r2, r4, #3
 8001f3c:	4614      	mov	r4, r2
 8001f3e:	461d      	mov	r5, r3
 8001f40:	4643      	mov	r3, r8
 8001f42:	18e3      	adds	r3, r4, r3
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	464b      	mov	r3, r9
 8001f48:	eb45 0303 	adc.w	r3, r5, r3
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	028b      	lsls	r3, r1, #10
 8001f5e:	4621      	mov	r1, r4
 8001f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f64:	4621      	mov	r1, r4
 8001f66:	028a      	lsls	r2, r1, #10
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	61fa      	str	r2, [r7, #28]
 8001f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f78:	f7fe f982 	bl	8000280 <__aeabi_uldivmod>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4613      	mov	r3, r2
 8001f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	0c1b      	lsrs	r3, r3, #16
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001f94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f9e:	e002      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3750      	adds	r7, #80	@ 0x50
 8001fac:	46bd      	mov	sp, r7
 8001fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	00f42400 	.word	0x00f42400
 8001fbc:	007a1200 	.word	0x007a1200

08001fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fdc:	f7ff fff0 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0a9b      	lsrs	r3, r3, #10
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4903      	ldr	r1, [pc, #12]	@ (8001ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	08007d54 	.word	0x08007d54

08002000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002004:	f7ff ffdc 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0b5b      	lsrs	r3, r3, #13
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4903      	ldr	r1, [pc, #12]	@ (8002024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	08007d54 	.word	0x08007d54

08002028 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e022      	b.n	8002080 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7fe fded 	bl	8000c2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f814 	bl	8002088 <HAL_SD_InitCard>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00a      	b.n	8002080 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b08e      	sub	sp, #56	@ 0x38
 800208c:	af04      	add	r7, sp, #16
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80020a4:	2376      	movs	r3, #118	@ 0x76
 80020a6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681d      	ldr	r5, [r3, #0]
 80020ac:	466c      	mov	r4, sp
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c0:	4628      	mov	r0, r5
 80020c2:	f001 fd5f 	bl	8003b84 <SDIO_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80020cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e04f      	b.n	8002178 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80020d8:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <HAL_SD_InitCard+0xf8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f001 fd97 	bl	8003c16 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <HAL_SD_InitCard+0xf8>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80020ee:	2002      	movs	r0, #2
 80020f0:	f7fe ff60 	bl	8000fb4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 ff13 	bl	8002f20 <SD_PowerON>
 80020fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e02e      	b.n	8002178 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fe32 	bl	8002d84 <SD_InitCard>
 8002120:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e01b      	b.n	8002178 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002148:	4618      	mov	r0, r3
 800214a:	f001 fdf6 	bl	8003d3a <SDMMC_CmdBlockLength>
 800214e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00f      	beq.n	8002176 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <HAL_SD_InitCard+0xfc>)
 800215c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3728      	adds	r7, #40	@ 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bdb0      	pop	{r4, r5, r7, pc}
 8002180:	422580a0 	.word	0x422580a0
 8002184:	004005ff 	.word	0x004005ff

08002188 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b092      	sub	sp, #72	@ 0x48
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002196:	f7fe ff01 	bl	8000f9c <HAL_GetTick>
 800219a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d107      	bne.n	80021ba <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1c5      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	f040 81b8 	bne.w	8002538 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80021ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	441a      	add	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	429a      	cmp	r2, r3
 80021da:	d907      	bls.n	80021ec <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e1ac      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2203      	movs	r2, #3
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002200:	2b01      	cmp	r3, #1
 8002202:	d002      	beq.n	800220a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	025b      	lsls	r3, r3, #9
 8002214:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002216:	2390      	movs	r3, #144	@ 0x90
 8002218:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002222:	2301      	movs	r3, #1
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f107 0214 	add.w	r2, r7, #20
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f001 fd56 	bl	8003ce2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d90a      	bls.n	8002252 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2202      	movs	r2, #2
 8002240:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002248:	4618      	mov	r0, r3
 800224a:	f001 fdba 	bl	8003dc2 <SDMMC_CmdReadMultiBlock>
 800224e:	6478      	str	r0, [r7, #68]	@ 0x44
 8002250:	e009      	b.n	8002266 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800225e:	4618      	mov	r0, r3
 8002260:	f001 fd8d 	bl	8003d7e <SDMMC_CmdReadSingleBlock>
 8002264:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002268:	2b00      	cmp	r3, #0
 800226a:	d012      	beq.n	8002292 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7e      	ldr	r2, [pc, #504]	@ (800246c <HAL_SD_ReadBlocks+0x2e4>)
 8002272:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800227a:	431a      	orrs	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e159      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002296:	e061      	b.n	800235c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d03c      	beq.n	8002320 <HAL_SD_ReadBlocks+0x198>
 80022a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d039      	beq.n	8002320 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80022b0:	e033      	b.n	800231a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 fc8f 	bl	8003bda <SDIO_ReadFIFO>
 80022bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80022be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c8:	3301      	adds	r3, #1
 80022ca:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80022cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ce:	3b01      	subs	r3, #1
 80022d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80022d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022de:	3301      	adds	r3, #1
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80022e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e4:	3b01      	subs	r3, #1
 80022e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80022e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f4:	3301      	adds	r3, #1
 80022f6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80022f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fa:	3b01      	subs	r3, #1
 80022fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80022fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002300:	0e1b      	lsrs	r3, r3, #24
 8002302:	b2da      	uxtb	r2, r3
 8002304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002306:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230a:	3301      	adds	r3, #1
 800230c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800230e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002310:	3b01      	subs	r3, #1
 8002312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002316:	3301      	adds	r3, #1
 8002318:	643b      	str	r3, [r7, #64]	@ 0x40
 800231a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800231c:	2b07      	cmp	r3, #7
 800231e:	d9c8      	bls.n	80022b2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002320:	f7fe fe3c 	bl	8000f9c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800232c:	429a      	cmp	r2, r3
 800232e:	d902      	bls.n	8002336 <HAL_SD_ReadBlocks+0x1ae>
 8002330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002332:	2b00      	cmp	r3, #0
 8002334:	d112      	bne.n	800235c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a4c      	ldr	r2, [pc, #304]	@ (800246c <HAL_SD_ReadBlocks+0x2e4>)
 800233c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0f4      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002362:	f240 332a 	movw	r3, #810	@ 0x32a
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d095      	beq.n	8002298 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d022      	beq.n	80023c0 <HAL_SD_ReadBlocks+0x238>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d91f      	bls.n	80023c0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002384:	2b03      	cmp	r3, #3
 8002386:	d01b      	beq.n	80023c0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f001 fd7f 	bl	8003e90 <SDMMC_CmdStopTransfer>
 8002392:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002396:	2b00      	cmp	r3, #0
 8002398:	d012      	beq.n	80023c0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a33      	ldr	r2, [pc, #204]	@ (800246c <HAL_SD_ReadBlocks+0x2e4>)
 80023a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0c2      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_SD_ReadBlocks+0x254>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d012      	beq.n	8002402 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a22      	ldr	r2, [pc, #136]	@ (800246c <HAL_SD_ReadBlocks+0x2e4>)
 80023e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	f043 0208 	orr.w	r2, r3, #8
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0a1      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a15      	ldr	r2, [pc, #84]	@ (800246c <HAL_SD_ReadBlocks+0x2e4>)
 8002416:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241c:	f043 0202 	orr.w	r2, r3, #2
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e087      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d064      	beq.n	800250e <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a08      	ldr	r2, [pc, #32]	@ (800246c <HAL_SD_ReadBlocks+0x2e4>)
 800244a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e06d      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
 800246a:	bf00      	nop
 800246c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f001 fbb0 	bl	8003bda <SDIO_ReadFIFO>
 800247a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800247c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247e:	b2da      	uxtb	r2, r3
 8002480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002482:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002486:	3301      	adds	r3, #1
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800248a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800248c:	3b01      	subs	r3, #1
 800248e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b2da      	uxtb	r2, r3
 8002496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002498:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800249a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800249c:	3301      	adds	r3, #1
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80024a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a2:	3b01      	subs	r3, #1
 80024a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80024a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80024b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b2:	3301      	adds	r3, #1
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80024b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b8:	3b01      	subs	r3, #1
 80024ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80024bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024be:	0e1b      	lsrs	r3, r3, #24
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80024c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c8:	3301      	adds	r3, #1
 80024ca:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80024cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ce:	3b01      	subs	r3, #1
 80024d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80024d2:	f7fe fd63 	bl	8000f9c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80024de:	429a      	cmp	r2, r3
 80024e0:	d902      	bls.n	80024e8 <HAL_SD_ReadBlocks+0x360>
 80024e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d112      	bne.n	800250e <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a18      	ldr	r2, [pc, #96]	@ (8002550 <HAL_SD_ReadBlocks+0x3c8>)
 80024ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e01b      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_SD_ReadBlocks+0x39a>
 800251c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1a6      	bne.n	8002470 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f240 523a 	movw	r2, #1338	@ 0x53a
 800252a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	e006      	b.n	8002546 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3748      	adds	r7, #72	@ 0x48
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	004005ff 	.word	0x004005ff

08002554 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b092      	sub	sp, #72	@ 0x48
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002562:	f7fe fd1b 	bl	8000f9c <HAL_GetTick>
 8002566:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d107      	bne.n	8002586 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e16d      	b.n	8002862 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	f040 8160 	bne.w	8002854 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800259a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	441a      	add	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d907      	bls.n	80025b8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e154      	b.n	8002862 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2203      	movs	r2, #3
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2200      	movs	r2, #0
 80025c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d002      	beq.n	80025d6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80025d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d2:	025b      	lsls	r3, r3, #9
 80025d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	025b      	lsls	r3, r3, #9
 80025e0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80025e2:	2390      	movs	r3, #144	@ 0x90
 80025e4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80025ee:	2301      	movs	r3, #1
 80025f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f107 0218 	add.w	r2, r7, #24
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 fb70 	bl	8003ce2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d90a      	bls.n	800261e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002614:	4618      	mov	r0, r3
 8002616:	f001 fc18 	bl	8003e4a <SDMMC_CmdWriteMultiBlock>
 800261a:	6478      	str	r0, [r7, #68]	@ 0x44
 800261c:	e009      	b.n	8002632 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2210      	movs	r2, #16
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800262a:	4618      	mov	r0, r3
 800262c:	f001 fbeb 	bl	8003e06 <SDMMC_CmdWriteSingleBlock>
 8002630:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002634:	2b00      	cmp	r3, #0
 8002636:	d012      	beq.n	800265e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a8b      	ldr	r2, [pc, #556]	@ (800286c <HAL_SD_WriteBlocks+0x318>)
 800263e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002646:	431a      	orrs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e101      	b.n	8002862 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002662:	e065      	b.n	8002730 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800266a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d040      	beq.n	80026f4 <HAL_SD_WriteBlocks+0x1a0>
 8002672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d03d      	beq.n	80026f4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002678:	2300      	movs	r3, #0
 800267a:	643b      	str	r3, [r7, #64]	@ 0x40
 800267c:	e037      	b.n	80026ee <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800267e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002686:	3301      	adds	r3, #1
 8002688:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800268a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800268c:	3b01      	subs	r3, #1
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800269c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269e:	3301      	adds	r3, #1
 80026a0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80026a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a4:	3b01      	subs	r3, #1
 80026a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80026a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	041a      	lsls	r2, r3, #16
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80026b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b6:	3301      	adds	r3, #1
 80026b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80026ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026bc:	3b01      	subs	r3, #1
 80026be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80026c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	061a      	lsls	r2, r3, #24
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80026cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ce:	3301      	adds	r3, #1
 80026d0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80026d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d4:	3b01      	subs	r3, #1
 80026d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f107 0214 	add.w	r2, r7, #20
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f001 fa86 	bl	8003bf4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80026e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ea:	3301      	adds	r3, #1
 80026ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80026ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026f0:	2b07      	cmp	r3, #7
 80026f2:	d9c4      	bls.n	800267e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80026f4:	f7fe fc52 	bl	8000f9c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002700:	429a      	cmp	r2, r3
 8002702:	d902      	bls.n	800270a <HAL_SD_WriteBlocks+0x1b6>
 8002704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002706:	2b00      	cmp	r3, #0
 8002708:	d112      	bne.n	8002730 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a57      	ldr	r2, [pc, #348]	@ (800286c <HAL_SD_WriteBlocks+0x318>)
 8002710:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002718:	431a      	orrs	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e098      	b.n	8002862 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002736:	f240 331a 	movw	r3, #794	@ 0x31a
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d091      	beq.n	8002664 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d022      	beq.n	8002794 <HAL_SD_WriteBlocks+0x240>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d91f      	bls.n	8002794 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002758:	2b03      	cmp	r3, #3
 800275a:	d01b      	beq.n	8002794 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fb95 	bl	8003e90 <SDMMC_CmdStopTransfer>
 8002766:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800276a:	2b00      	cmp	r3, #0
 800276c:	d012      	beq.n	8002794 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a3e      	ldr	r2, [pc, #248]	@ (800286c <HAL_SD_WriteBlocks+0x318>)
 8002774:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800277a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800277c:	431a      	orrs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e066      	b.n	8002862 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_SD_WriteBlocks+0x25c>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d012      	beq.n	80027d6 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a2d      	ldr	r2, [pc, #180]	@ (800286c <HAL_SD_WriteBlocks+0x318>)
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	f043 0208 	orr.w	r2, r3, #8
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e045      	b.n	8002862 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a20      	ldr	r2, [pc, #128]	@ (800286c <HAL_SD_WriteBlocks+0x318>)
 80027ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f0:	f043 0202 	orr.w	r2, r3, #2
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e02b      	b.n	8002862 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	d012      	beq.n	800283e <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a13      	ldr	r2, [pc, #76]	@ (800286c <HAL_SD_WriteBlocks+0x318>)
 800281e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002824:	f043 0210 	orr.w	r2, r3, #16
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e011      	b.n	8002862 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002846:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e006      	b.n	8002862 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002858:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3748      	adds	r7, #72	@ 0x48
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	004005ff 	.word	0x004005ff

08002870 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800287e:	0f9b      	lsrs	r3, r3, #30
 8002880:	b2da      	uxtb	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	b2da      	uxtb	r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800289c:	0e1b      	lsrs	r3, r3, #24
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028d0:	0d1b      	lsrs	r3, r3, #20
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028ee:	0bdb      	lsrs	r3, r3, #15
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002900:	0b9b      	lsrs	r3, r3, #14
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002912:	0b5b      	lsrs	r3, r3, #13
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002924:	0b1b      	lsrs	r3, r3, #12
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2200      	movs	r2, #0
 8002936:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	2b00      	cmp	r3, #0
 800293e:	d163      	bne.n	8002a08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002944:	009a      	lsls	r2, r3, #2
 8002946:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002950:	0f92      	lsrs	r2, r2, #30
 8002952:	431a      	orrs	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800295c:	0edb      	lsrs	r3, r3, #27
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	b2da      	uxtb	r2, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800296e:	0e1b      	lsrs	r3, r3, #24
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	b2da      	uxtb	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002980:	0d5b      	lsrs	r3, r3, #21
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	b2da      	uxtb	r2, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002992:	0c9b      	lsrs	r3, r3, #18
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	b2da      	uxtb	r2, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a4:	0bdb      	lsrs	r3, r3, #15
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	7e1b      	ldrb	r3, [r3, #24]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	3302      	adds	r3, #2
 80029c8:	2201      	movs	r2, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80029d2:	fb03 f202 	mul.w	r2, r3, r2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	7a1b      	ldrb	r3, [r3, #8]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	2201      	movs	r2, #1
 80029e6:	409a      	lsls	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80029f4:	0a52      	lsrs	r2, r2, #9
 80029f6:	fb03 f202 	mul.w	r2, r3, r2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a04:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a06:	e031      	b.n	8002a6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d11d      	bne.n	8002a4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	431a      	orrs	r2, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	029a      	lsls	r2, r3, #10
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a40:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a4a:	e00f      	b.n	8002a6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a58      	ldr	r2, [pc, #352]	@ (8002bb4 <HAL_SD_GetCardCSD+0x344>)
 8002a52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e09d      	b.n	8002ba8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a70:	0b9b      	lsrs	r3, r3, #14
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a82:	09db      	lsrs	r3, r3, #7
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	0fdb      	lsrs	r3, r3, #31
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab0:	0f5b      	lsrs	r3, r3, #29
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	0d9b      	lsrs	r3, r3, #22
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	0d5b      	lsrs	r3, r3, #21
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b16:	0bdb      	lsrs	r3, r3, #15
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2a:	0b9b      	lsrs	r3, r3, #14
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	0b5b      	lsrs	r3, r3, #13
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b52:	0b1b      	lsrs	r3, r3, #12
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	085b      	lsrs	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	004005ff 	.word	0x004005ff

08002bb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002c10:	b5b0      	push	{r4, r5, r7, lr}
 8002c12:	b08e      	sub	sp, #56	@ 0x38
 8002c14:	af04      	add	r7, sp, #16
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2203      	movs	r2, #3
 8002c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d02e      	beq.n	8002c8e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c36:	d106      	bne.n	8002c46 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c44:	e029      	b.n	8002c9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c4c:	d10a      	bne.n	8002c64 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa1c 	bl	800308c <SD_WideBus_Enable>
 8002c54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c62:	e01a      	b.n	8002c9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa59 	bl	8003122 <SD_WideBus_Disable>
 8002c70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c7e:	e00c      	b.n	8002c9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c8c:	e005      	b.n	8002c9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c92:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a26      	ldr	r2, [pc, #152]	@ (8002d40 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002cb8:	e01f      	b.n	8002cfa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681d      	ldr	r5, [r3, #0]
 8002ce0:	466c      	mov	r4, sp
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	f000 ff45 	bl	8003b84 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 f819 	bl	8003d3a <SDMMC_CmdBlockLength>
 8002d08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002d16:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8002d32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3728      	adds	r7, #40	@ 0x28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	004005ff 	.word	0x004005ff

08002d44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	4619      	mov	r1, r3
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f970 	bl	800303c <SD_SendStatus>
 8002d5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	0a5b      	lsrs	r3, r3, #9
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002d7a:	693b      	ldr	r3, [r7, #16]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b094      	sub	sp, #80	@ 0x50
 8002d88:	af04      	add	r7, sp, #16
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 ff4c 	bl	8003c32 <SDIO_GetPowerState>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002da0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002da4:	e0b8      	b.n	8002f18 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d02f      	beq.n	8002e0e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 f976 	bl	80040a4 <SDMMC_CmdSendCID>
 8002db8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <SD_InitCard+0x40>
    {
      return errorstate;
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc2:	e0a9      	b.n	8002f18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 ff76 	bl	8003cbc <SDIO_GetResponse>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2104      	movs	r1, #4
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 ff6d 	bl	8003cbc <SDIO_GetResponse>
 8002de2:	4602      	mov	r2, r0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2108      	movs	r1, #8
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 ff64 	bl	8003cbc <SDIO_GetResponse>
 8002df4:	4602      	mov	r2, r0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	210c      	movs	r1, #12
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 ff5b 	bl	8003cbc <SDIO_GetResponse>
 8002e06:	4602      	mov	r2, r0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d00d      	beq.n	8002e32 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f107 020e 	add.w	r2, r7, #14
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 f97c 	bl	800411e <SDMMC_CmdSetRelAdd>
 8002e26:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <SD_InitCard+0xae>
    {
      return errorstate;
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e30:	e072      	b.n	8002f18 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d036      	beq.n	8002ea8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002e3a:	89fb      	ldrh	r3, [r7, #14]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f001 f946 	bl	80040e0 <SDMMC_CmdSendCSD>
 8002e54:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e5e:	e05b      	b.n	8002f18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 ff28 	bl	8003cbc <SDIO_GetResponse>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2104      	movs	r1, #4
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 ff1f 	bl	8003cbc <SDIO_GetResponse>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2108      	movs	r1, #8
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 ff16 	bl	8003cbc <SDIO_GetResponse>
 8002e90:	4602      	mov	r2, r0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	210c      	movs	r1, #12
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 ff0d 	bl	8003cbc <SDIO_GetResponse>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2104      	movs	r1, #4
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 ff04 	bl	8003cbc <SDIO_GetResponse>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	0d1a      	lsrs	r2, r3, #20
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fcd4 	bl	8002870 <HAL_SD_GetCardCSD>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ece:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002ed2:	e021      	b.n	8002f18 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	2200      	movs	r2, #0
 8002ee0:	461c      	mov	r4, r3
 8002ee2:	4615      	mov	r5, r2
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	4608      	mov	r0, r1
 8002eea:	f000 fff3 	bl	8003ed4 <SDMMC_CmdSelDesel>
 8002eee:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <SD_InitCard+0x176>
  {
    return errorstate;
 8002ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ef8:	e00e      	b.n	8002f18 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681d      	ldr	r5, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	466c      	mov	r4, sp
 8002f02:	f103 0210 	add.w	r2, r3, #16
 8002f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f10:	4628      	mov	r0, r5
 8002f12:	f000 fe37 	bl	8003b84 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3740      	adds	r7, #64	@ 0x40
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bdb0      	pop	{r4, r5, r7, pc}

08002f20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 ffee 	bl	8003f1a <SDMMC_CmdGoIdleState>
 8002f3e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <SD_PowerON+0x2a>
  {
    return errorstate;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	e072      	b.n	8003030 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 f801 	bl	8003f56 <SDMMC_CmdOperCond>
 8002f54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00d      	beq.n	8002f78 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 ffd7 	bl	8003f1a <SDMMC_CmdGoIdleState>
 8002f6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <SD_PowerON+0x5e>
    {
      return errorstate;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	e05b      	b.n	8003030 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d137      	bne.n	8002ff6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 f801 	bl	8003f94 <SDMMC_CmdAppCommand>
 8002f92:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02d      	beq.n	8002ff6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f9a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002f9e:	e047      	b.n	8003030 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fff4 	bl	8003f94 <SDMMC_CmdAppCommand>
 8002fac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <SD_PowerON+0x98>
    {
      return errorstate;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	e03b      	b.n	8003030 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	491e      	ldr	r1, [pc, #120]	@ (8003038 <SD_PowerON+0x118>)
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 f80a 	bl	8003fd8 <SDMMC_CmdAppOperCommand>
 8002fc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fcc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002fd0:	e02e      	b.n	8003030 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fe6f 	bl	8003cbc <SDIO_GetResponse>
 8002fde:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	0fdb      	lsrs	r3, r3, #31
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <SD_PowerON+0xcc>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <SD_PowerON+0xce>
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]

    count++;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d802      	bhi.n	8003006 <SD_PowerON+0xe6>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0cc      	beq.n	8002fa0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800300c:	4293      	cmp	r3, r2
 800300e:	d902      	bls.n	8003016 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003010:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003014:	e00c      	b.n	8003030 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	645a      	str	r2, [r3, #68]	@ 0x44
 8003026:	e002      	b.n	800302e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	c1100000 	.word	0xc1100000

0800303c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800304c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003050:	e018      	b.n	8003084 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f001 f87e 	bl	8004160 <SDMMC_CmdSendStatus>
 8003064:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <SD_SendStatus+0x34>
  {
    return errorstate;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	e009      	b.n	8003084 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fe20 	bl	8003cbc <SDIO_GetResponse>
 800307c:	4602      	mov	r2, r0
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fe0a 	bl	8003cbc <SDIO_GetResponse>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030b2:	d102      	bne.n	80030ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80030b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030b8:	e02f      	b.n	800311a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f879 	bl	80031b8 <SD_FindSCR>
 80030c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	e023      	b.n	800311a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01c      	beq.n	8003116 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	4619      	mov	r1, r3
 80030e8:	4610      	mov	r0, r2
 80030ea:	f000 ff53 	bl	8003f94 <SDMMC_CmdAppCommand>
 80030ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	e00f      	b.n	800311a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2102      	movs	r1, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f000 ff8c 	bl	800401e <SDMMC_CmdBusWidth>
 8003106:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	e003      	b.n	800311a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003112:	2300      	movs	r3, #0
 8003114:	e001      	b.n	800311a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003116:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fdbf 	bl	8003cbc <SDIO_GetResponse>
 800313e:	4603      	mov	r3, r0
 8003140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003144:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003148:	d102      	bne.n	8003150 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800314a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800314e:	e02f      	b.n	80031b0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	4619      	mov	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f82e 	bl	80031b8 <SD_FindSCR>
 800315c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	e023      	b.n	80031b0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d01c      	beq.n	80031ac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f000 ff08 	bl	8003f94 <SDMMC_CmdAppCommand>
 8003184:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	e00f      	b.n	80031b0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f000 ff41 	bl	800401e <SDMMC_CmdBusWidth>
 800319c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	e003      	b.n	80031b0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e001      	b.n	80031b0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80031ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b08f      	sub	sp, #60	@ 0x3c
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80031c2:	f7fd feeb 	bl	8000f9c <HAL_GetTick>
 80031c6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2108      	movs	r1, #8
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fdab 	bl	8003d3a <SDMMC_CmdBlockLength>
 80031e4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80031e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80031ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ee:	e0b9      	b.n	8003364 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f000 fec9 	bl	8003f94 <SDMMC_CmdAppCommand>
 8003202:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <SD_FindSCR+0x56>
  {
    return errorstate;
 800320a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320c:	e0aa      	b.n	8003364 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003214:	2308      	movs	r3, #8
 8003216:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003218:	2330      	movs	r3, #48	@ 0x30
 800321a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800321c:	2302      	movs	r3, #2
 800321e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003220:	2300      	movs	r3, #0
 8003222:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003224:	2301      	movs	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f107 0210 	add.w	r2, r7, #16
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fd55 	bl	8003ce2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 ff10 	bl	8004062 <SDMMC_CmdSendSCR>
 8003242:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	d02a      	beq.n	80032a0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324c:	e08a      	b.n	8003364 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00f      	beq.n	800327c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f107 0208 	add.w	r2, r7, #8
 8003268:	18d4      	adds	r4, r2, r3
 800326a:	4608      	mov	r0, r1
 800326c:	f000 fcb5 	bl	8003bda <SDIO_ReadFIFO>
 8003270:	4603      	mov	r3, r0
 8003272:	6023      	str	r3, [r4, #0]
      index++;
 8003274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003276:	3301      	adds	r3, #1
 8003278:	637b      	str	r3, [r7, #52]	@ 0x34
 800327a:	e006      	b.n	800328a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d012      	beq.n	80032b0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800328a:	f7fd fe87 	bl	8000f9c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d102      	bne.n	80032a0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800329a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800329e:	e061      	b.n	8003364 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0cf      	beq.n	800324e <SD_FindSCR+0x96>
 80032ae:	e000      	b.n	80032b2 <SD_FindSCR+0xfa>
      break;
 80032b0:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <SD_FindSCR+0x116>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2208      	movs	r2, #8
 80032d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80032d6:	2308      	movs	r3, #8
 80032d8:	e044      	b.n	8003364 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2202      	movs	r2, #2
 80032ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80032f0:	2302      	movs	r3, #2
 80032f2:	e037      	b.n	8003364 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2220      	movs	r2, #32
 8003308:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800330a:	2320      	movs	r3, #32
 800330c:	e02a      	b.n	8003364 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003316:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	061a      	lsls	r2, r3, #24
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003324:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800332e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	0e1b      	lsrs	r3, r3, #24
 8003334:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003338:	601a      	str	r2, [r3, #0]
    scr++;
 800333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333c:	3304      	adds	r3, #4
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	061a      	lsls	r2, r3, #24
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800334c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003356:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	0e1b      	lsrs	r3, r3, #24
 800335c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003360:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	373c      	adds	r7, #60	@ 0x3c
 8003368:	46bd      	mov	sp, r7
 800336a:	bd90      	pop	{r4, r7, pc}

0800336c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e042      	b.n	8003404 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd fcb2 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	@ 0x24
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f973 	bl	800369c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	@ 0x28
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b20      	cmp	r3, #32
 800342a:	d175      	bne.n	8003518 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_UART_Transmit+0x2c>
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e06e      	b.n	800351a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2221      	movs	r2, #33	@ 0x21
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800344a:	f7fd fda7 	bl	8000f9c <HAL_GetTick>
 800344e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	88fa      	ldrh	r2, [r7, #6]
 8003454:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	88fa      	ldrh	r2, [r7, #6]
 800345a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003464:	d108      	bne.n	8003478 <HAL_UART_Transmit+0x6c>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d104      	bne.n	8003478 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e003      	b.n	8003480 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003480:	e02e      	b.n	80034e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	2180      	movs	r1, #128	@ 0x80
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f848 	bl	8003522 <UART_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e03a      	b.n	800351a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	3302      	adds	r3, #2
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	e007      	b.n	80034d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	3301      	adds	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1cb      	bne.n	8003482 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2140      	movs	r1, #64	@ 0x40
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f814 	bl	8003522 <UART_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e006      	b.n	800351a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	e000      	b.n	800351a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003532:	e03b      	b.n	80035ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d037      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353c:	f7fd fd2e 	bl	8000f9c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	6a3a      	ldr	r2, [r7, #32]
 8003548:	429a      	cmp	r2, r3
 800354a:	d302      	bcc.n	8003552 <UART_WaitOnFlagUntilTimeout+0x30>
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e03a      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d023      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b80      	cmp	r3, #128	@ 0x80
 8003568:	d020      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b40      	cmp	r3, #64	@ 0x40
 800356e:	d01d      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b08      	cmp	r3, #8
 800357c:	d116      	bne.n	80035ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f81d 	bl	80035d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2208      	movs	r2, #8
 800359e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e00f      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d0b4      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b095      	sub	sp, #84	@ 0x54
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80035fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003602:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e5      	bne.n	80035dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3314      	adds	r3, #20
 8003616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003630:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	2b01      	cmp	r3, #1
 800364a:	d119      	bne.n	8003680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	60bb      	str	r3, [r7, #8]
   return(result);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f023 0310 	bic.w	r3, r3, #16
 8003662:	647b      	str	r3, [r7, #68]	@ 0x44
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800366c:	61ba      	str	r2, [r7, #24]
 800366e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6979      	ldr	r1, [r7, #20]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	613b      	str	r3, [r7, #16]
   return(result);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800368e:	bf00      	nop
 8003690:	3754      	adds	r7, #84	@ 0x54
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800369c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a0:	b0c0      	sub	sp, #256	@ 0x100
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b8:	68d9      	ldr	r1, [r3, #12]
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	ea40 0301 	orr.w	r3, r0, r1
 80036c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	431a      	orrs	r2, r3
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036f4:	f021 010c 	bic.w	r1, r1, #12
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003702:	430b      	orrs	r3, r1
 8003704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003716:	6999      	ldr	r1, [r3, #24]
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	ea40 0301 	orr.w	r3, r0, r1
 8003722:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b8f      	ldr	r3, [pc, #572]	@ (8003968 <UART_SetConfig+0x2cc>)
 800372c:	429a      	cmp	r2, r3
 800372e:	d005      	beq.n	800373c <UART_SetConfig+0xa0>
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b8d      	ldr	r3, [pc, #564]	@ (800396c <UART_SetConfig+0x2d0>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d104      	bne.n	8003746 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800373c:	f7fe fc60 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
 8003740:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003744:	e003      	b.n	800374e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003746:	f7fe fc47 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 800374a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003758:	f040 810c 	bne.w	8003974 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800375c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003760:	2200      	movs	r2, #0
 8003762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003766:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800376a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800376e:	4622      	mov	r2, r4
 8003770:	462b      	mov	r3, r5
 8003772:	1891      	adds	r1, r2, r2
 8003774:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003776:	415b      	adcs	r3, r3
 8003778:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800377a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800377e:	4621      	mov	r1, r4
 8003780:	eb12 0801 	adds.w	r8, r2, r1
 8003784:	4629      	mov	r1, r5
 8003786:	eb43 0901 	adc.w	r9, r3, r1
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800379a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800379e:	4690      	mov	r8, r2
 80037a0:	4699      	mov	r9, r3
 80037a2:	4623      	mov	r3, r4
 80037a4:	eb18 0303 	adds.w	r3, r8, r3
 80037a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037ac:	462b      	mov	r3, r5
 80037ae:	eb49 0303 	adc.w	r3, r9, r3
 80037b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037ca:	460b      	mov	r3, r1
 80037cc:	18db      	adds	r3, r3, r3
 80037ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80037d0:	4613      	mov	r3, r2
 80037d2:	eb42 0303 	adc.w	r3, r2, r3
 80037d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80037d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037e0:	f7fc fd4e 	bl	8000280 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4b61      	ldr	r3, [pc, #388]	@ (8003970 <UART_SetConfig+0x2d4>)
 80037ea:	fba3 2302 	umull	r2, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	011c      	lsls	r4, r3, #4
 80037f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003800:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003804:	4642      	mov	r2, r8
 8003806:	464b      	mov	r3, r9
 8003808:	1891      	adds	r1, r2, r2
 800380a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800380c:	415b      	adcs	r3, r3
 800380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003814:	4641      	mov	r1, r8
 8003816:	eb12 0a01 	adds.w	sl, r2, r1
 800381a:	4649      	mov	r1, r9
 800381c:	eb43 0b01 	adc.w	fp, r3, r1
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800382c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003834:	4692      	mov	sl, r2
 8003836:	469b      	mov	fp, r3
 8003838:	4643      	mov	r3, r8
 800383a:	eb1a 0303 	adds.w	r3, sl, r3
 800383e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003842:	464b      	mov	r3, r9
 8003844:	eb4b 0303 	adc.w	r3, fp, r3
 8003848:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003858:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800385c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003860:	460b      	mov	r3, r1
 8003862:	18db      	adds	r3, r3, r3
 8003864:	643b      	str	r3, [r7, #64]	@ 0x40
 8003866:	4613      	mov	r3, r2
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	647b      	str	r3, [r7, #68]	@ 0x44
 800386e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003876:	f7fc fd03 	bl	8000280 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4611      	mov	r1, r2
 8003880:	4b3b      	ldr	r3, [pc, #236]	@ (8003970 <UART_SetConfig+0x2d4>)
 8003882:	fba3 2301 	umull	r2, r3, r3, r1
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2264      	movs	r2, #100	@ 0x64
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	1acb      	subs	r3, r1, r3
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003896:	4b36      	ldr	r3, [pc, #216]	@ (8003970 <UART_SetConfig+0x2d4>)
 8003898:	fba3 2302 	umull	r2, r3, r3, r2
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038a4:	441c      	add	r4, r3
 80038a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038aa:	2200      	movs	r2, #0
 80038ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038b8:	4642      	mov	r2, r8
 80038ba:	464b      	mov	r3, r9
 80038bc:	1891      	adds	r1, r2, r2
 80038be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038c0:	415b      	adcs	r3, r3
 80038c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038c8:	4641      	mov	r1, r8
 80038ca:	1851      	adds	r1, r2, r1
 80038cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80038ce:	4649      	mov	r1, r9
 80038d0:	414b      	adcs	r3, r1
 80038d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038e0:	4659      	mov	r1, fp
 80038e2:	00cb      	lsls	r3, r1, #3
 80038e4:	4651      	mov	r1, sl
 80038e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ea:	4651      	mov	r1, sl
 80038ec:	00ca      	lsls	r2, r1, #3
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	4642      	mov	r2, r8
 80038f6:	189b      	adds	r3, r3, r2
 80038f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038fc:	464b      	mov	r3, r9
 80038fe:	460a      	mov	r2, r1
 8003900:	eb42 0303 	adc.w	r3, r2, r3
 8003904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003914:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800391c:	460b      	mov	r3, r1
 800391e:	18db      	adds	r3, r3, r3
 8003920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003922:	4613      	mov	r3, r2
 8003924:	eb42 0303 	adc.w	r3, r2, r3
 8003928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800392a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800392e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003932:	f7fc fca5 	bl	8000280 <__aeabi_uldivmod>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4b0d      	ldr	r3, [pc, #52]	@ (8003970 <UART_SetConfig+0x2d4>)
 800393c:	fba3 1302 	umull	r1, r3, r3, r2
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	2164      	movs	r1, #100	@ 0x64
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	3332      	adds	r3, #50	@ 0x32
 800394e:	4a08      	ldr	r2, [pc, #32]	@ (8003970 <UART_SetConfig+0x2d4>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	f003 0207 	and.w	r2, r3, #7
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4422      	add	r2, r4
 8003962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003964:	e106      	b.n	8003b74 <UART_SetConfig+0x4d8>
 8003966:	bf00      	nop
 8003968:	40011000 	.word	0x40011000
 800396c:	40011400 	.word	0x40011400
 8003970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800397e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003986:	4642      	mov	r2, r8
 8003988:	464b      	mov	r3, r9
 800398a:	1891      	adds	r1, r2, r2
 800398c:	6239      	str	r1, [r7, #32]
 800398e:	415b      	adcs	r3, r3
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
 8003992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003996:	4641      	mov	r1, r8
 8003998:	1854      	adds	r4, r2, r1
 800399a:	4649      	mov	r1, r9
 800399c:	eb43 0501 	adc.w	r5, r3, r1
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	00eb      	lsls	r3, r5, #3
 80039aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ae:	00e2      	lsls	r2, r4, #3
 80039b0:	4614      	mov	r4, r2
 80039b2:	461d      	mov	r5, r3
 80039b4:	4643      	mov	r3, r8
 80039b6:	18e3      	adds	r3, r4, r3
 80039b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039bc:	464b      	mov	r3, r9
 80039be:	eb45 0303 	adc.w	r3, r5, r3
 80039c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039e2:	4629      	mov	r1, r5
 80039e4:	008b      	lsls	r3, r1, #2
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ec:	4621      	mov	r1, r4
 80039ee:	008a      	lsls	r2, r1, #2
 80039f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039f4:	f7fc fc44 	bl	8000280 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4b60      	ldr	r3, [pc, #384]	@ (8003b80 <UART_SetConfig+0x4e4>)
 80039fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	011c      	lsls	r4, r3, #4
 8003a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a18:	4642      	mov	r2, r8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	1891      	adds	r1, r2, r2
 8003a1e:	61b9      	str	r1, [r7, #24]
 8003a20:	415b      	adcs	r3, r3
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a28:	4641      	mov	r1, r8
 8003a2a:	1851      	adds	r1, r2, r1
 8003a2c:	6139      	str	r1, [r7, #16]
 8003a2e:	4649      	mov	r1, r9
 8003a30:	414b      	adcs	r3, r1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a40:	4659      	mov	r1, fp
 8003a42:	00cb      	lsls	r3, r1, #3
 8003a44:	4651      	mov	r1, sl
 8003a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a4a:	4651      	mov	r1, sl
 8003a4c:	00ca      	lsls	r2, r1, #3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	4642      	mov	r2, r8
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	460a      	mov	r2, r1
 8003a60:	eb42 0303 	adc.w	r3, r2, r3
 8003a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a80:	4649      	mov	r1, r9
 8003a82:	008b      	lsls	r3, r1, #2
 8003a84:	4641      	mov	r1, r8
 8003a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	008a      	lsls	r2, r1, #2
 8003a8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a92:	f7fc fbf5 	bl	8000280 <__aeabi_uldivmod>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4b38      	ldr	r3, [pc, #224]	@ (8003b80 <UART_SetConfig+0x4e4>)
 8003a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2264      	movs	r2, #100	@ 0x64
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	1acb      	subs	r3, r1, r3
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	3332      	adds	r3, #50	@ 0x32
 8003ab0:	4a33      	ldr	r2, [pc, #204]	@ (8003b80 <UART_SetConfig+0x4e4>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003abc:	441c      	add	r4, r3
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ac6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ac8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	1891      	adds	r1, r2, r2
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	415b      	adcs	r3, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003adc:	4641      	mov	r1, r8
 8003ade:	1851      	adds	r1, r2, r1
 8003ae0:	6039      	str	r1, [r7, #0]
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	414b      	adcs	r3, r1
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003af4:	4659      	mov	r1, fp
 8003af6:	00cb      	lsls	r3, r1, #3
 8003af8:	4651      	mov	r1, sl
 8003afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afe:	4651      	mov	r1, sl
 8003b00:	00ca      	lsls	r2, r1, #3
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	4642      	mov	r2, r8
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b0e:	464b      	mov	r3, r9
 8003b10:	460a      	mov	r2, r1
 8003b12:	eb42 0303 	adc.w	r3, r2, r3
 8003b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b22:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b30:	4649      	mov	r1, r9
 8003b32:	008b      	lsls	r3, r1, #2
 8003b34:	4641      	mov	r1, r8
 8003b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	008a      	lsls	r2, r1, #2
 8003b3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b42:	f7fc fb9d 	bl	8000280 <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <UART_SetConfig+0x4e4>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	2164      	movs	r1, #100	@ 0x64
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	3332      	adds	r3, #50	@ 0x32
 8003b5e:	4a08      	ldr	r2, [pc, #32]	@ (8003b80 <UART_SetConfig+0x4e4>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 020f 	and.w	r2, r3, #15
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4422      	add	r2, r4
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	bf00      	nop
 8003b76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b80:	51eb851f 	.word	0x51eb851f

08003b84 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003b84:	b084      	sub	sp, #16
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	f107 001c 	add.w	r0, r7, #28
 8003b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003b9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003b9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8003ba2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003ba6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003baa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003bae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8003bbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	b004      	add	sp, #16
 8003bd8:	4770      	bx	lr

08003bda <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2203      	movs	r2, #3
 8003c22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003c6c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003c72:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003c78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003c88:	f023 030f 	bic.w	r3, r3, #15
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	b2db      	uxtb	r3, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3314      	adds	r3, #20
 8003cca:	461a      	mov	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
}  
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003d0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003d14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d20:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0

}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003d48:	2310      	movs	r3, #16
 8003d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d4c:	2340      	movs	r3, #64	@ 0x40
 8003d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d5a:	f107 0308 	add.w	r3, r7, #8
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff74 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	2110      	movs	r1, #16
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fa19 	bl	80041a4 <SDMMC_GetCmdResp1>
 8003d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d74:	69fb      	ldr	r3, [r7, #28]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b088      	sub	sp, #32
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003d8c:	2311      	movs	r3, #17
 8003d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d90:	2340      	movs	r3, #64	@ 0x40
 8003d92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff52 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	2111      	movs	r1, #17
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f9f7 	bl	80041a4 <SDMMC_GetCmdResp1>
 8003db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003db8:	69fb      	ldr	r3, [r7, #28]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b088      	sub	sp, #32
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003dd0:	2312      	movs	r3, #18
 8003dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dd4:	2340      	movs	r3, #64	@ 0x40
 8003dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff30 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df2:	2112      	movs	r1, #18
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f9d5 	bl	80041a4 <SDMMC_GetCmdResp1>
 8003dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b088      	sub	sp, #32
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003e14:	2318      	movs	r3, #24
 8003e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e18:	2340      	movs	r3, #64	@ 0x40
 8003e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e26:	f107 0308 	add.w	r3, r7, #8
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff0e 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e36:	2118      	movs	r1, #24
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f9b3 	bl	80041a4 <SDMMC_GetCmdResp1>
 8003e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e40:	69fb      	ldr	r3, [r7, #28]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b088      	sub	sp, #32
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003e58:	2319      	movs	r3, #25
 8003e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e5c:	2340      	movs	r3, #64	@ 0x40
 8003e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e6a:	f107 0308 	add.w	r3, r7, #8
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff feec 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	2119      	movs	r1, #25
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f991 	bl	80041a4 <SDMMC_GetCmdResp1>
 8003e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e84:	69fb      	ldr	r3, [r7, #28]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003e9c:	230c      	movs	r3, #12
 8003e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ea0:	2340      	movs	r3, #64	@ 0x40
 8003ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eae:	f107 0308 	add.w	r3, r7, #8
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff feca 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003eba:	4a05      	ldr	r2, [pc, #20]	@ (8003ed0 <SDMMC_CmdStopTransfer+0x40>)
 8003ebc:	210c      	movs	r1, #12
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f970 	bl	80041a4 <SDMMC_GetCmdResp1>
 8003ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	05f5e100 	.word	0x05f5e100

08003ed4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	@ 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003ee4:	2307      	movs	r3, #7
 8003ee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ee8:	2340      	movs	r3, #64	@ 0x40
 8003eea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ef4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ef6:	f107 0310 	add.w	r3, r7, #16
 8003efa:	4619      	mov	r1, r3
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff fea6 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	2107      	movs	r1, #7
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f94b 	bl	80041a4 <SDMMC_GetCmdResp1>
 8003f0e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3728      	adds	r7, #40	@ 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b088      	sub	sp, #32
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f38:	f107 0308 	add.w	r3, r7, #8
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fe85 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fb65 	bl	8004614 <SDMMC_GetCmdError>
 8003f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b088      	sub	sp, #32
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003f5e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003f62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003f64:	2308      	movs	r3, #8
 8003f66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f68:	2340      	movs	r3, #64	@ 0x40
 8003f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f76:	f107 0308 	add.w	r3, r7, #8
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fe66 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 faf8 	bl	8004578 <SDMMC_GetCmdResp7>
 8003f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003fa2:	2337      	movs	r3, #55	@ 0x37
 8003fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fa6:	2340      	movs	r3, #64	@ 0x40
 8003fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fb4:	f107 0308 	add.w	r3, r7, #8
 8003fb8:	4619      	mov	r1, r3
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fe47 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc4:	2137      	movs	r1, #55	@ 0x37
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8ec 	bl	80041a4 <SDMMC_GetCmdResp1>
 8003fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fce:	69fb      	ldr	r3, [r7, #28]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fe8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003fee:	2329      	movs	r3, #41	@ 0x29
 8003ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ff2:	2340      	movs	r3, #64	@ 0x40
 8003ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fe21 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f9ff 	bl	8004410 <SDMMC_GetCmdResp3>
 8004012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004014:	69fb      	ldr	r3, [r7, #28]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b088      	sub	sp, #32
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800402c:	2306      	movs	r3, #6
 800402e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004030:	2340      	movs	r3, #64	@ 0x40
 8004032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800403c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800403e:	f107 0308 	add.w	r3, r7, #8
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff fe02 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800404a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404e:	2106      	movs	r1, #6
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f8a7 	bl	80041a4 <SDMMC_GetCmdResp1>
 8004056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004058:	69fb      	ldr	r3, [r7, #28]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b088      	sub	sp, #32
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800406e:	2333      	movs	r3, #51	@ 0x33
 8004070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004072:	2340      	movs	r3, #64	@ 0x40
 8004074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800407a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800407e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004080:	f107 0308 	add.w	r3, r7, #8
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fde1 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800408c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004090:	2133      	movs	r1, #51	@ 0x33
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f886 	bl	80041a4 <SDMMC_GetCmdResp1>
 8004098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800409a:	69fb      	ldr	r3, [r7, #28]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80040b0:	2302      	movs	r3, #2
 80040b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80040b4:	23c0      	movs	r3, #192	@ 0xc0
 80040b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fdc0 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f956 	bl	8004380 <SDMMC_GetCmdResp2>
 80040d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040d6:	69fb      	ldr	r3, [r7, #28]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80040ee:	2309      	movs	r3, #9
 80040f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80040f2:	23c0      	movs	r3, #192	@ 0xc0
 80040f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004100:	f107 0308 	add.w	r3, r7, #8
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff fda1 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f937 	bl	8004380 <SDMMC_GetCmdResp2>
 8004112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004114:	69fb      	ldr	r3, [r7, #28]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b088      	sub	sp, #32
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800412c:	2303      	movs	r3, #3
 800412e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004130:	2340      	movs	r3, #64	@ 0x40
 8004132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800413c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	4619      	mov	r1, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fd82 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	2103      	movs	r1, #3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f99c 	bl	800448c <SDMMC_GetCmdResp6>
 8004154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004156:	69fb      	ldr	r3, [r7, #28]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800416e:	230d      	movs	r3, #13
 8004170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004172:	2340      	movs	r3, #64	@ 0x40
 8004174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800417a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800417e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004180:	f107 0308 	add.w	r3, r7, #8
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fd61 	bl	8003c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800418c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004190:	210d      	movs	r1, #13
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f806 	bl	80041a4 <SDMMC_GetCmdResp1>
 8004198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800419a:	69fb      	ldr	r3, [r7, #28]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	460b      	mov	r3, r1
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80041b2:	4b70      	ldr	r3, [pc, #448]	@ (8004374 <SDMMC_GetCmdResp1+0x1d0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a70      	ldr	r2, [pc, #448]	@ (8004378 <SDMMC_GetCmdResp1+0x1d4>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	0a5a      	lsrs	r2, r3, #9
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	1e5a      	subs	r2, r3, #1
 80041ca:	61fa      	str	r2, [r7, #28]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80041d4:	e0c9      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ef      	beq.n	80041c6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ea      	bne.n	80041c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2204      	movs	r2, #4
 8004200:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004202:	2304      	movs	r3, #4
 8004204:	e0b1      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004218:	2301      	movs	r3, #1
 800421a:	e0a6      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	22c5      	movs	r2, #197	@ 0xc5
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7ff fd3d 	bl	8003ca2 <SDIO_GetCommandResponse>
 8004228:	4603      	mov	r3, r0
 800422a:	461a      	mov	r2, r3
 800422c:	7afb      	ldrb	r3, [r7, #11]
 800422e:	4293      	cmp	r3, r2
 8004230:	d001      	beq.n	8004236 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004232:	2301      	movs	r3, #1
 8004234:	e099      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004236:	2100      	movs	r1, #0
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff fd3f 	bl	8003cbc <SDIO_GetResponse>
 800423e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4b4e      	ldr	r3, [pc, #312]	@ (800437c <SDMMC_GetCmdResp1+0x1d8>)
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800424a:	2300      	movs	r3, #0
 800424c:	e08d      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	da02      	bge.n	800425a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004254:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004258:	e087      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004264:	2340      	movs	r3, #64	@ 0x40
 8004266:	e080      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004272:	2380      	movs	r3, #128	@ 0x80
 8004274:	e079      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004284:	e071      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004294:	e069      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80042a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042a4:	e061      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80042b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80042b4:	e059      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80042c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042c4:	e051      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80042d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042d4:	e049      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80042e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042e4:	e041      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80042f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042f4:	e039      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004300:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004304:	e031      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004310:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004314:	e029      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004320:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004324:	e021      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004330:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004334:	e019      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004340:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004344:	e011      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004350:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004354:	e009      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004360:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004364:	e001      	b.n	800436a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004366:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000000 	.word	0x20000000
 8004378:	10624dd3 	.word	0x10624dd3
 800437c:	fdffe008 	.word	0xfdffe008

08004380 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004388:	4b1f      	ldr	r3, [pc, #124]	@ (8004408 <SDMMC_GetCmdResp2+0x88>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1f      	ldr	r2, [pc, #124]	@ (800440c <SDMMC_GetCmdResp2+0x8c>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	0a5b      	lsrs	r3, r3, #9
 8004394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	60fa      	str	r2, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80043a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80043ac:	e026      	b.n	80043fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0ef      	beq.n	800439e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1ea      	bne.n	800439e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2204      	movs	r2, #4
 80043d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043da:	2304      	movs	r3, #4
 80043dc:	e00e      	b.n	80043fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e003      	b.n	80043fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	22c5      	movs	r2, #197	@ 0xc5
 80043f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	20000000 	.word	0x20000000
 800440c:	10624dd3 	.word	0x10624dd3

08004410 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004418:	4b1a      	ldr	r3, [pc, #104]	@ (8004484 <SDMMC_GetCmdResp3+0x74>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1a      	ldr	r2, [pc, #104]	@ (8004488 <SDMMC_GetCmdResp3+0x78>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	0a5b      	lsrs	r3, r3, #9
 8004424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1e5a      	subs	r2, r3, #1
 8004432:	60fa      	str	r2, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004438:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800443c:	e01b      	b.n	8004476 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004442:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ef      	beq.n	800442e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ea      	bne.n	800442e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d004      	beq.n	800446e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2204      	movs	r2, #4
 8004468:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800446a:	2304      	movs	r3, #4
 800446c:	e003      	b.n	8004476 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	22c5      	movs	r2, #197	@ 0xc5
 8004472:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000
 8004488:	10624dd3 	.word	0x10624dd3

0800448c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	460b      	mov	r3, r1
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800449a:	4b35      	ldr	r3, [pc, #212]	@ (8004570 <SDMMC_GetCmdResp6+0xe4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a35      	ldr	r2, [pc, #212]	@ (8004574 <SDMMC_GetCmdResp6+0xe8>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	0a5b      	lsrs	r3, r3, #9
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	1e5a      	subs	r2, r3, #1
 80044b4:	61fa      	str	r2, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80044be:	e052      	b.n	8004566 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ef      	beq.n	80044b0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ea      	bne.n	80044b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2204      	movs	r2, #4
 80044ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044ec:	2304      	movs	r3, #4
 80044ee:	e03a      	b.n	8004566 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004502:	2301      	movs	r3, #1
 8004504:	e02f      	b.n	8004566 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff fbcb 	bl	8003ca2 <SDIO_GetCommandResponse>
 800450c:	4603      	mov	r3, r0
 800450e:	461a      	mov	r2, r3
 8004510:	7afb      	ldrb	r3, [r7, #11]
 8004512:	4293      	cmp	r3, r2
 8004514:	d001      	beq.n	800451a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004516:	2301      	movs	r3, #1
 8004518:	e025      	b.n	8004566 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	22c5      	movs	r2, #197	@ 0xc5
 800451e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004520:	2100      	movs	r1, #0
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fbca 	bl	8003cbc <SDIO_GetResponse>
 8004528:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	0c1b      	lsrs	r3, r3, #16
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800453e:	2300      	movs	r3, #0
 8004540:	e011      	b.n	8004566 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800454c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004550:	e009      	b.n	8004566 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800455c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004560:	e001      	b.n	8004566 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000000 	.word	0x20000000
 8004574:	10624dd3 	.word	0x10624dd3

08004578 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004580:	4b22      	ldr	r3, [pc, #136]	@ (800460c <SDMMC_GetCmdResp7+0x94>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a22      	ldr	r2, [pc, #136]	@ (8004610 <SDMMC_GetCmdResp7+0x98>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	0a5b      	lsrs	r3, r3, #9
 800458c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004590:	fb02 f303 	mul.w	r3, r2, r3
 8004594:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1e5a      	subs	r2, r3, #1
 800459a:	60fa      	str	r2, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80045a4:	e02c      	b.n	8004600 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0ef      	beq.n	8004596 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ea      	bne.n	8004596 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d004      	beq.n	80045d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2204      	movs	r2, #4
 80045d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045d2:	2304      	movs	r3, #4
 80045d4:	e014      	b.n	8004600 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e009      	b.n	8004600 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2240      	movs	r2, #64	@ 0x40
 80045fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80045fe:	2300      	movs	r3, #0
  
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	20000000 	.word	0x20000000
 8004610:	10624dd3 	.word	0x10624dd3

08004614 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800461c:	4b11      	ldr	r3, [pc, #68]	@ (8004664 <SDMMC_GetCmdError+0x50>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a11      	ldr	r2, [pc, #68]	@ (8004668 <SDMMC_GetCmdError+0x54>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	0a5b      	lsrs	r3, r3, #9
 8004628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462c:	fb02 f303 	mul.w	r3, r2, r3
 8004630:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1e5a      	subs	r2, r3, #1
 8004636:	60fa      	str	r2, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800463c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004640:	e009      	b.n	8004656 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f1      	beq.n	8004632 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	22c5      	movs	r2, #197	@ 0xc5
 8004652:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000000 	.word	0x20000000
 8004668:	10624dd3 	.word	0x10624dd3

0800466c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004670:	4904      	ldr	r1, [pc, #16]	@ (8004684 <MX_FATFS_Init+0x18>)
 8004672:	4805      	ldr	r0, [pc, #20]	@ (8004688 <MX_FATFS_Init+0x1c>)
 8004674:	f002 fc9e 	bl	8006fb4 <FATFS_LinkDriver>
 8004678:	4603      	mov	r3, r0
 800467a:	461a      	mov	r2, r3
 800467c:	4b03      	ldr	r3, [pc, #12]	@ (800468c <MX_FATFS_Init+0x20>)
 800467e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004680:	bf00      	nop
 8004682:	bd80      	pop	{r7, pc}
 8004684:	200021fc 	.word	0x200021fc
 8004688:	08007d5c 	.word	0x08007d5c
 800468c:	200021f8 	.word	0x200021f8

08004690 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004694:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004696:	4618      	mov	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80046aa:	f000 f86b 	bl	8004784 <BSP_SD_IsDetected>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d001      	beq.n	80046b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e005      	b.n	80046c4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80046b8:	4804      	ldr	r0, [pc, #16]	@ (80046cc <BSP_SD_Init+0x2c>)
 80046ba:	f7fd fcb5 	bl	8002028 <HAL_SD_Init>
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80046c2:	79fb      	ldrb	r3, [r7, #7]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20002124 	.word	0x20002124

080046d0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	4806      	ldr	r0, [pc, #24]	@ (8004708 <BSP_SD_ReadBlocks+0x38>)
 80046ee:	f7fd fd4b 	bl	8002188 <HAL_SD_ReadBlocks>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20002124 	.word	0x20002124

0800470c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	4806      	ldr	r0, [pc, #24]	@ (8004744 <BSP_SD_WriteBlocks+0x38>)
 800472a:	f7fd ff13 	bl	8002554 <HAL_SD_WriteBlocks>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004738:	7dfb      	ldrb	r3, [r7, #23]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20002124 	.word	0x20002124

08004748 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800474c:	4805      	ldr	r0, [pc, #20]	@ (8004764 <BSP_SD_GetCardState+0x1c>)
 800474e:	f7fe faf9 	bl	8002d44 <HAL_SD_GetCardState>
 8004752:	4603      	mov	r3, r0
 8004754:	2b04      	cmp	r3, #4
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
}
 800475e:	4618      	mov	r0, r3
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20002124 	.word	0x20002124

08004768 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4803      	ldr	r0, [pc, #12]	@ (8004780 <BSP_SD_GetCardInfo+0x18>)
 8004774:	f7fe fa20 	bl	8002bb8 <HAL_SD_GetCardInfo>
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20002124 	.word	0x20002124

08004784 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800478a:	2301      	movs	r3, #1
 800478c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	b2db      	uxtb	r3, r3
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <SD_CheckStatus+0x38>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80047b0:	f7ff ffca 	bl	8004748 <BSP_SD_GetCardState>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d107      	bne.n	80047ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80047ba:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <SD_CheckStatus+0x38>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <SD_CheckStatus+0x38>)
 80047c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80047ca:	4b03      	ldr	r3, [pc, #12]	@ (80047d8 <SD_CheckStatus+0x38>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	b2db      	uxtb	r3, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000009 	.word	0x20000009

080047dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <SD_initialize+0x38>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80047ec:	f7ff ff58 	bl	80046a0 <BSP_SD_Init>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ffd1 	bl	80047a0 <SD_CheckStatus>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <SD_initialize+0x38>)
 8004804:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004806:	4b03      	ldr	r3, [pc, #12]	@ (8004814 <SD_initialize+0x38>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	b2db      	uxtb	r3, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000009 	.word	0x20000009

08004818 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ffbb 	bl	80047a0 <SD_CheckStatus>
 800482a:	4603      	mov	r3, r0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	68b8      	ldr	r0, [r7, #8]
 8004852:	f7ff ff3d 	bl	80046d0 <BSP_SD_ReadBlocks>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800485c:	bf00      	nop
 800485e:	f7ff ff73 	bl	8004748 <BSP_SD_GetCardState>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1fa      	bne.n	800485e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800486c:	7dfb      	ldrb	r3, [r7, #23]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4603      	mov	r3, r0
 8004884:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800488a:	f04f 33ff 	mov.w	r3, #4294967295
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f7ff ff3a 	bl	800470c <BSP_SD_WriteBlocks>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800489e:	bf00      	nop
 80048a0:	f7ff ff52 	bl	8004748 <BSP_SD_GetCardState>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1fa      	bne.n	80048a0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08c      	sub	sp, #48	@ 0x30
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	603a      	str	r2, [r7, #0]
 80048c2:	71fb      	strb	r3, [r7, #7]
 80048c4:	460b      	mov	r3, r1
 80048c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80048ce:	4b25      	ldr	r3, [pc, #148]	@ (8004964 <SD_ioctl+0xac>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <SD_ioctl+0x28>
 80048dc:	2303      	movs	r3, #3
 80048de:	e03c      	b.n	800495a <SD_ioctl+0xa2>

  switch (cmd)
 80048e0:	79bb      	ldrb	r3, [r7, #6]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d834      	bhi.n	8004950 <SD_ioctl+0x98>
 80048e6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <SD_ioctl+0x34>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	080048fd 	.word	0x080048fd
 80048f0:	08004905 	.word	0x08004905
 80048f4:	0800491d 	.word	0x0800491d
 80048f8:	08004937 	.word	0x08004937
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004902:	e028      	b.n	8004956 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004904:	f107 030c 	add.w	r3, r7, #12
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff2d 	bl	8004768 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800490e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800491a:	e01c      	b.n	8004956 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff21 	bl	8004768 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	b29a      	uxth	r2, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004934:	e00f      	b.n	8004956 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004936:	f107 030c 	add.w	r3, r7, #12
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff ff14 	bl	8004768 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004942:	0a5a      	lsrs	r2, r3, #9
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800494e:	e002      	b.n	8004956 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004950:	2304      	movs	r3, #4
 8004952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8004956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800495a:	4618      	mov	r0, r3
 800495c:	3730      	adds	r7, #48	@ 0x30
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000009 	.word	0x20000009

08004968 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	4a08      	ldr	r2, [pc, #32]	@ (8004998 <disk_status+0x30>)
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	79fa      	ldrb	r2, [r7, #7]
 8004980:	4905      	ldr	r1, [pc, #20]	@ (8004998 <disk_status+0x30>)
 8004982:	440a      	add	r2, r1
 8004984:	7a12      	ldrb	r2, [r2, #8]
 8004986:	4610      	mov	r0, r2
 8004988:	4798      	blx	r3
 800498a:	4603      	mov	r3, r0
 800498c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20002228 	.word	0x20002228

0800499c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	4a0e      	ldr	r2, [pc, #56]	@ (80049e8 <disk_initialize+0x4c>)
 80049ae:	5cd3      	ldrb	r3, [r2, r3]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d114      	bne.n	80049de <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	4a0c      	ldr	r2, [pc, #48]	@ (80049e8 <disk_initialize+0x4c>)
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	79fa      	ldrb	r2, [r7, #7]
 80049c2:	4909      	ldr	r1, [pc, #36]	@ (80049e8 <disk_initialize+0x4c>)
 80049c4:	440a      	add	r2, r1
 80049c6:	7a12      	ldrb	r2, [r2, #8]
 80049c8:	4610      	mov	r0, r2
 80049ca:	4798      	blx	r3
 80049cc:	4603      	mov	r3, r0
 80049ce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	4a03      	ldr	r2, [pc, #12]	@ (80049e8 <disk_initialize+0x4c>)
 80049da:	2101      	movs	r1, #1
 80049dc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20002228 	.word	0x20002228

080049ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4603      	mov	r3, r0
 80049fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004a28 <disk_read+0x3c>)
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	689c      	ldr	r4, [r3, #8]
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	4a07      	ldr	r2, [pc, #28]	@ (8004a28 <disk_read+0x3c>)
 8004a0c:	4413      	add	r3, r2
 8004a0e:	7a18      	ldrb	r0, [r3, #8]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	47a0      	blx	r4
 8004a18:	4603      	mov	r3, r0
 8004a1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd90      	pop	{r4, r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20002228 	.word	0x20002228

08004a2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a68 <disk_write+0x3c>)
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	68dc      	ldr	r4, [r3, #12]
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	4a07      	ldr	r2, [pc, #28]	@ (8004a68 <disk_write+0x3c>)
 8004a4c:	4413      	add	r3, r2
 8004a4e:	7a18      	ldrb	r0, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	47a0      	blx	r4
 8004a58:	4603      	mov	r3, r0
 8004a5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd90      	pop	{r4, r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20002228 	.word	0x20002228

08004a6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	603a      	str	r2, [r7, #0]
 8004a76:	71fb      	strb	r3, [r7, #7]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	4a09      	ldr	r2, [pc, #36]	@ (8004aa4 <disk_ioctl+0x38>)
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	79fa      	ldrb	r2, [r7, #7]
 8004a8a:	4906      	ldr	r1, [pc, #24]	@ (8004aa4 <disk_ioctl+0x38>)
 8004a8c:	440a      	add	r2, r1
 8004a8e:	7a10      	ldrb	r0, [r2, #8]
 8004a90:	79b9      	ldrb	r1, [r7, #6]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	4798      	blx	r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	73fb      	strb	r3, [r7, #15]
  return res;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20002228 	.word	0x20002228

08004aa8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	b21a      	sxth	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b21b      	sxth	r3, r3
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	b21b      	sxth	r3, r3
 8004ac8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004aca:	89fb      	ldrh	r3, [r7, #14]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3303      	adds	r3, #3
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	3202      	adds	r2, #2
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	3201      	adds	r2, #1
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	7812      	ldrb	r2, [r2, #0]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b10:	68fb      	ldr	r3, [r7, #12]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	887a      	ldrh	r2, [r7, #2]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	887b      	ldrh	r3, [r7, #2]
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	0a1b      	lsrs	r3, r3, #8
 8004b6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	0a1b      	lsrs	r3, r3, #8
 8004b92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00d      	beq.n	8004be2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	1c53      	adds	r3, r2, #1
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1c59      	adds	r1, r3, #1
 8004bd0:	6179      	str	r1, [r7, #20]
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f1      	bne.n	8004bc6 <mem_cpy+0x1a>
	}
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004bee:	b480      	push	{r7}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	617a      	str	r2, [r7, #20]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f3      	bne.n	8004bfe <mem_set+0x10>
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	61fa      	str	r2, [r7, #28]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	4619      	mov	r1, r3
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	61ba      	str	r2, [r7, #24]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	1acb      	subs	r3, r1, r3
 8004c50:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	607b      	str	r3, [r7, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <mem_cmp+0x40>
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0eb      	beq.n	8004c3c <mem_cmp+0x18>

	return r;
 8004c64:	697b      	ldr	r3, [r7, #20]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3724      	adds	r7, #36	@ 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004c7c:	e002      	b.n	8004c84 <chk_chr+0x12>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3301      	adds	r3, #1
 8004c82:	607b      	str	r3, [r7, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <chk_chr+0x26>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d1f2      	bne.n	8004c7e <chk_chr+0xc>
	return *str;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	e029      	b.n	8004d10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004cbc:	4a27      	ldr	r2, [pc, #156]	@ (8004d5c <chk_lock+0xb4>)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	4413      	add	r3, r2
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01d      	beq.n	8004d06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004cca:	4a24      	ldr	r2, [pc, #144]	@ (8004d5c <chk_lock+0xb4>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	4413      	add	r3, r2
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d116      	bne.n	8004d0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d5c <chk_lock+0xb4>)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d10c      	bne.n	8004d0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8004d5c <chk_lock+0xb4>)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d102      	bne.n	8004d0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d04:	e007      	b.n	8004d16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d9d2      	bls.n	8004cbc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d109      	bne.n	8004d30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <chk_lock+0x80>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d101      	bne.n	8004d2c <chk_lock+0x84>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e010      	b.n	8004d4e <chk_lock+0xa6>
 8004d2c:	2312      	movs	r3, #18
 8004d2e:	e00e      	b.n	8004d4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d108      	bne.n	8004d48 <chk_lock+0xa0>
 8004d36:	4a09      	ldr	r2, [pc, #36]	@ (8004d5c <chk_lock+0xb4>)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	4413      	add	r3, r2
 8004d3e:	330c      	adds	r3, #12
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d46:	d101      	bne.n	8004d4c <chk_lock+0xa4>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	e000      	b.n	8004d4e <chk_lock+0xa6>
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20002208 	.word	0x20002208

08004d60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e002      	b.n	8004d72 <enq_lock+0x12>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d806      	bhi.n	8004d86 <enq_lock+0x26>
 8004d78:	4a09      	ldr	r2, [pc, #36]	@ (8004da0 <enq_lock+0x40>)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	4413      	add	r3, r2
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f2      	bne.n	8004d6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20002208 	.word	0x20002208

08004da4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e01f      	b.n	8004df4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004db4:	4a41      	ldr	r2, [pc, #260]	@ (8004ebc <inc_lock+0x118>)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	4413      	add	r3, r2
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d113      	bne.n	8004dee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004dc6:	4a3d      	ldr	r2, [pc, #244]	@ (8004ebc <inc_lock+0x118>)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	4413      	add	r3, r2
 8004dce:	3304      	adds	r3, #4
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d109      	bne.n	8004dee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004dda:	4a38      	ldr	r2, [pc, #224]	@ (8004ebc <inc_lock+0x118>)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4413      	add	r3, r2
 8004de2:	3308      	adds	r3, #8
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d006      	beq.n	8004dfc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3301      	adds	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d9dc      	bls.n	8004db4 <inc_lock+0x10>
 8004dfa:	e000      	b.n	8004dfe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004dfc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d132      	bne.n	8004e6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	e002      	b.n	8004e10 <inc_lock+0x6c>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d806      	bhi.n	8004e24 <inc_lock+0x80>
 8004e16:	4a29      	ldr	r2, [pc, #164]	@ (8004ebc <inc_lock+0x118>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	4413      	add	r3, r2
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f2      	bne.n	8004e0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d101      	bne.n	8004e2e <inc_lock+0x8a>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e040      	b.n	8004eb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4922      	ldr	r1, [pc, #136]	@ (8004ebc <inc_lock+0x118>)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	440b      	add	r3, r1
 8004e3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	491e      	ldr	r1, [pc, #120]	@ (8004ebc <inc_lock+0x118>)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	440b      	add	r3, r1
 8004e48:	3304      	adds	r3, #4
 8004e4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	491a      	ldr	r1, [pc, #104]	@ (8004ebc <inc_lock+0x118>)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	440b      	add	r3, r1
 8004e58:	3308      	adds	r3, #8
 8004e5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004e5c:	4a17      	ldr	r2, [pc, #92]	@ (8004ebc <inc_lock+0x118>)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	4413      	add	r3, r2
 8004e64:	330c      	adds	r3, #12
 8004e66:	2200      	movs	r2, #0
 8004e68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <inc_lock+0xe0>
 8004e70:	4a12      	ldr	r2, [pc, #72]	@ (8004ebc <inc_lock+0x118>)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	4413      	add	r3, r2
 8004e78:	330c      	adds	r3, #12
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <inc_lock+0xe0>
 8004e80:	2300      	movs	r3, #0
 8004e82:	e015      	b.n	8004eb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d108      	bne.n	8004e9c <inc_lock+0xf8>
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004ebc <inc_lock+0x118>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	4413      	add	r3, r2
 8004e92:	330c      	adds	r3, #12
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	e001      	b.n	8004ea0 <inc_lock+0xfc>
 8004e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ea0:	4906      	ldr	r1, [pc, #24]	@ (8004ebc <inc_lock+0x118>)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	440b      	add	r3, r1
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3301      	adds	r3, #1
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20002208 	.word	0x20002208

08004ec0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d825      	bhi.n	8004f20 <dec_lock+0x60>
		n = Files[i].ctr;
 8004ed4:	4a17      	ldr	r2, [pc, #92]	@ (8004f34 <dec_lock+0x74>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	4413      	add	r3, r2
 8004edc:	330c      	adds	r3, #12
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004ee2:	89fb      	ldrh	r3, [r7, #14]
 8004ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee8:	d101      	bne.n	8004eee <dec_lock+0x2e>
 8004eea:	2300      	movs	r3, #0
 8004eec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004eee:	89fb      	ldrh	r3, [r7, #14]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <dec_lock+0x3a>
 8004ef4:	89fb      	ldrh	r3, [r7, #14]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004efa:	4a0e      	ldr	r2, [pc, #56]	@ (8004f34 <dec_lock+0x74>)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	4413      	add	r3, r2
 8004f02:	330c      	adds	r3, #12
 8004f04:	89fa      	ldrh	r2, [r7, #14]
 8004f06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <dec_lock+0x5a>
 8004f0e:	4a09      	ldr	r2, [pc, #36]	@ (8004f34 <dec_lock+0x74>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	4413      	add	r3, r2
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	737b      	strb	r3, [r7, #13]
 8004f1e:	e001      	b.n	8004f24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004f20:	2302      	movs	r3, #2
 8004f22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004f24:	7b7b      	ldrb	r3, [r7, #13]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20002208 	.word	0x20002208

08004f38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e010      	b.n	8004f68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004f46:	4a0d      	ldr	r2, [pc, #52]	@ (8004f7c <clear_lock+0x44>)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	4413      	add	r3, r2
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d105      	bne.n	8004f62 <clear_lock+0x2a>
 8004f56:	4a09      	ldr	r2, [pc, #36]	@ (8004f7c <clear_lock+0x44>)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	4413      	add	r3, r2
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d9eb      	bls.n	8004f46 <clear_lock+0xe>
	}
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20002208 	.word	0x20002208

08004f80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	78db      	ldrb	r3, [r3, #3]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d034      	beq.n	8004ffe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7858      	ldrb	r0, [r3, #1]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	f7ff fd40 	bl	8004a2c <disk_write>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
 8004fb6:	e022      	b.n	8004ffe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d217      	bcs.n	8004ffe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	789b      	ldrb	r3, [r3, #2]
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	e010      	b.n	8004ff8 <sync_window+0x78>
					wsect += fs->fsize;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4413      	add	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	7858      	ldrb	r0, [r3, #1]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004fea:	2301      	movs	r3, #1
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	f7ff fd1d 	bl	8004a2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d8eb      	bhi.n	8004fd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d01b      	beq.n	8005058 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ffad 	bl	8004f80 <sync_window>
 8005026:	4603      	mov	r3, r0
 8005028:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d113      	bne.n	8005058 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	7858      	ldrb	r0, [r3, #1]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800503a:	2301      	movs	r3, #1
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	f7ff fcd5 	bl	80049ec <disk_read>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
 800504c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800504e:	2301      	movs	r3, #1
 8005050:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ff87 	bl	8004f80 <sync_window>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d159      	bne.n	8005130 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d149      	bne.n	8005118 <sync_fs+0xb4>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	791b      	ldrb	r3, [r3, #4]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d145      	bne.n	8005118 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	899b      	ldrh	r3, [r3, #12]
 8005096:	461a      	mov	r2, r3
 8005098:	2100      	movs	r1, #0
 800509a:	f7ff fda8 	bl	8004bee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3334      	adds	r3, #52	@ 0x34
 80050a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80050a6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fd37 	bl	8004b1e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3334      	adds	r3, #52	@ 0x34
 80050b4:	4921      	ldr	r1, [pc, #132]	@ (800513c <sync_fs+0xd8>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fd4c 	bl	8004b54 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3334      	adds	r3, #52	@ 0x34
 80050c0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80050c4:	491e      	ldr	r1, [pc, #120]	@ (8005140 <sync_fs+0xdc>)
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fd44 	bl	8004b54 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3334      	adds	r3, #52	@ 0x34
 80050d0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f7ff fd3a 	bl	8004b54 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3334      	adds	r3, #52	@ 0x34
 80050e4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f7ff fd30 	bl	8004b54 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	7858      	ldrb	r0, [r3, #1]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800510c:	2301      	movs	r3, #1
 800510e:	f7ff fc8d 	bl	8004a2c <disk_write>
			fs->fsi_flag = 0;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2200      	movs	r2, #0
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fca3 	bl	8004a6c <disk_ioctl>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <sync_fs+0xcc>
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	41615252 	.word	0x41615252
 8005140:	61417272 	.word	0x61417272

08005144 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	3b02      	subs	r3, #2
 8005152:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	3b02      	subs	r3, #2
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d301      	bcc.n	8005164 <clust2sect+0x20>
 8005160:	2300      	movs	r3, #0
 8005162:	e008      	b.n	8005176 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	895b      	ldrh	r3, [r3, #10]
 8005168:	461a      	mov	r2, r3
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	fb03 f202 	mul.w	r2, r3, r2
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	4413      	add	r3, r2
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b086      	sub	sp, #24
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d904      	bls.n	80051a2 <get_fat+0x20>
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d302      	bcc.n	80051a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80051a2:	2301      	movs	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e0ba      	b.n	800531e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80051a8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	f000 8082 	beq.w	80052bc <get_fat+0x13a>
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	f300 80a6 	bgt.w	800530a <get_fat+0x188>
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d002      	beq.n	80051c8 <get_fat+0x46>
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d055      	beq.n	8005272 <get_fat+0xf0>
 80051c6:	e0a0      	b.n	800530a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	899b      	ldrh	r3, [r3, #12]
 80051de:	4619      	mov	r1, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051e6:	4413      	add	r3, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	6938      	ldr	r0, [r7, #16]
 80051ec:	f7ff ff0c 	bl	8005008 <move_window>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 808c 	bne.w	8005310 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	60fa      	str	r2, [r7, #12]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	8992      	ldrh	r2, [r2, #12]
 8005202:	fbb3 f1f2 	udiv	r1, r3, r2
 8005206:	fb01 f202 	mul.w	r2, r1, r2
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005214:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	899b      	ldrh	r3, [r3, #12]
 800521e:	4619      	mov	r1, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	fbb3 f3f1 	udiv	r3, r3, r1
 8005226:	4413      	add	r3, r2
 8005228:	4619      	mov	r1, r3
 800522a:	6938      	ldr	r0, [r7, #16]
 800522c:	f7ff feec 	bl	8005008 <move_window>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d16e      	bne.n	8005314 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	899b      	ldrh	r3, [r3, #12]
 800523a:	461a      	mov	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005242:	fb01 f202 	mul.w	r2, r1, r2
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	4313      	orrs	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <get_fat+0xe6>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	e002      	b.n	800526e <get_fat+0xec>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526e:	617b      	str	r3, [r7, #20]
			break;
 8005270:	e055      	b.n	800531e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	899b      	ldrh	r3, [r3, #12]
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	b29b      	uxth	r3, r3
 800527e:	4619      	mov	r1, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	fbb3 f3f1 	udiv	r3, r3, r1
 8005286:	4413      	add	r3, r2
 8005288:	4619      	mov	r1, r3
 800528a:	6938      	ldr	r0, [r7, #16]
 800528c:	f7ff febc 	bl	8005008 <move_window>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d140      	bne.n	8005318 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	8992      	ldrh	r2, [r2, #12]
 80052a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80052a8:	fb00 f202 	mul.w	r2, r0, r2
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	440b      	add	r3, r1
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fbf9 	bl	8004aa8 <ld_word>
 80052b6:	4603      	mov	r3, r0
 80052b8:	617b      	str	r3, [r7, #20]
			break;
 80052ba:	e030      	b.n	800531e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	899b      	ldrh	r3, [r3, #12]
 80052c4:	089b      	lsrs	r3, r3, #2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	4619      	mov	r1, r3
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80052d0:	4413      	add	r3, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	6938      	ldr	r0, [r7, #16]
 80052d6:	f7ff fe97 	bl	8005008 <move_window>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11d      	bne.n	800531c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	8992      	ldrh	r2, [r2, #12]
 80052ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80052f2:	fb00 f202 	mul.w	r2, r0, r2
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	440b      	add	r3, r1
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fbec 	bl	8004ad8 <ld_dword>
 8005300:	4603      	mov	r3, r0
 8005302:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005306:	617b      	str	r3, [r7, #20]
			break;
 8005308:	e009      	b.n	800531e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800530a:	2301      	movs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e006      	b.n	800531e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005310:	bf00      	nop
 8005312:	e004      	b.n	800531e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005314:	bf00      	nop
 8005316:	e002      	b.n	800531e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005318:	bf00      	nop
 800531a:	e000      	b.n	800531e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800531c:	bf00      	nop
		}
	}

	return val;
 800531e:	697b      	ldr	r3, [r7, #20]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b089      	sub	sp, #36	@ 0x24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005334:	2302      	movs	r3, #2
 8005336:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b01      	cmp	r3, #1
 800533c:	f240 8109 	bls.w	8005552 <put_fat+0x22a>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	429a      	cmp	r2, r3
 8005348:	f080 8103 	bcs.w	8005552 <put_fat+0x22a>
		switch (fs->fs_type) {
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b03      	cmp	r3, #3
 8005352:	f000 80b6 	beq.w	80054c2 <put_fat+0x19a>
 8005356:	2b03      	cmp	r3, #3
 8005358:	f300 80fb 	bgt.w	8005552 <put_fat+0x22a>
 800535c:	2b01      	cmp	r3, #1
 800535e:	d003      	beq.n	8005368 <put_fat+0x40>
 8005360:	2b02      	cmp	r3, #2
 8005362:	f000 8083 	beq.w	800546c <put_fat+0x144>
 8005366:	e0f4      	b.n	8005552 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4413      	add	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	899b      	ldrh	r3, [r3, #12]
 800537e:	4619      	mov	r1, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	fbb3 f3f1 	udiv	r3, r3, r1
 8005386:	4413      	add	r3, r2
 8005388:	4619      	mov	r1, r3
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff fe3c 	bl	8005008 <move_window>
 8005390:	4603      	mov	r3, r0
 8005392:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005394:	7ffb      	ldrb	r3, [r7, #31]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f040 80d4 	bne.w	8005544 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	61ba      	str	r2, [r7, #24]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	8992      	ldrh	r2, [r2, #12]
 80053ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80053b0:	fb00 f202 	mul.w	r2, r0, r2
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	440b      	add	r3, r1
 80053b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <put_fat+0xb8>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b25b      	sxtb	r3, r3
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	b25a      	sxtb	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b25b      	sxtb	r3, r3
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	e001      	b.n	80053e4 <put_fat+0xbc>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	899b      	ldrh	r3, [r3, #12]
 80053f6:	4619      	mov	r1, r3
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80053fe:	4413      	add	r3, r2
 8005400:	4619      	mov	r1, r3
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff fe00 	bl	8005008 <move_window>
 8005408:	4603      	mov	r3, r0
 800540a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800540c:	7ffb      	ldrb	r3, [r7, #31]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 809a 	bne.w	8005548 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	899b      	ldrh	r3, [r3, #12]
 800541e:	461a      	mov	r2, r3
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	fbb3 f0f2 	udiv	r0, r3, r2
 8005426:	fb00 f202 	mul.w	r2, r0, r2
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	440b      	add	r3, r1
 800542e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <put_fat+0x11a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	b2db      	uxtb	r3, r3
 8005440:	e00e      	b.n	8005460 <put_fat+0x138>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	b25b      	sxtb	r3, r3
 8005448:	f023 030f 	bic.w	r3, r3, #15
 800544c:	b25a      	sxtb	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	0a1b      	lsrs	r3, r3, #8
 8005452:	b25b      	sxtb	r3, r3
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	b25b      	sxtb	r3, r3
 800545a:	4313      	orrs	r3, r2
 800545c:	b25b      	sxtb	r3, r3
 800545e:	b2db      	uxtb	r3, r3
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	70da      	strb	r2, [r3, #3]
			break;
 800546a:	e072      	b.n	8005552 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	899b      	ldrh	r3, [r3, #12]
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	b29b      	uxth	r3, r3
 8005478:	4619      	mov	r1, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005480:	4413      	add	r3, r2
 8005482:	4619      	mov	r1, r3
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff fdbf 	bl	8005008 <move_window>
 800548a:	4603      	mov	r3, r0
 800548c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800548e:	7ffb      	ldrb	r3, [r7, #31]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d15b      	bne.n	800554c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	8992      	ldrh	r2, [r2, #12]
 80054a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80054a6:	fb00 f202 	mul.w	r2, r0, r2
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	440b      	add	r3, r1
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	b292      	uxth	r2, r2
 80054b2:	4611      	mov	r1, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fb32 	bl	8004b1e <st_word>
			fs->wflag = 1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	70da      	strb	r2, [r3, #3]
			break;
 80054c0:	e047      	b.n	8005552 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	899b      	ldrh	r3, [r3, #12]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	4619      	mov	r1, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80054d6:	4413      	add	r3, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f7ff fd94 	bl	8005008 <move_window>
 80054e0:	4603      	mov	r3, r0
 80054e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054e4:	7ffb      	ldrb	r3, [r7, #31]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d132      	bne.n	8005550 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	8992      	ldrh	r2, [r2, #12]
 80054fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005502:	fb00 f202 	mul.w	r2, r0, r2
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	440b      	add	r3, r1
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fae4 	bl	8004ad8 <ld_dword>
 8005510:	4603      	mov	r3, r0
 8005512:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005516:	4323      	orrs	r3, r4
 8005518:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	8992      	ldrh	r2, [r2, #12]
 8005528:	fbb3 f0f2 	udiv	r0, r3, r2
 800552c:	fb00 f202 	mul.w	r2, r0, r2
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	440b      	add	r3, r1
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff fb0c 	bl	8004b54 <st_dword>
			fs->wflag = 1;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	70da      	strb	r2, [r3, #3]
			break;
 8005542:	e006      	b.n	8005552 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005544:	bf00      	nop
 8005546:	e004      	b.n	8005552 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005548:	bf00      	nop
 800554a:	e002      	b.n	8005552 <put_fat+0x22a>
			if (res != FR_OK) break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005550:	bf00      	nop
		}
	}
	return res;
 8005552:	7ffb      	ldrb	r3, [r7, #31]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3724      	adds	r7, #36	@ 0x24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd90      	pop	{r4, r7, pc}

0800555c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d904      	bls.n	8005582 <remove_chain+0x26>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	429a      	cmp	r2, r3
 8005580:	d301      	bcc.n	8005586 <remove_chain+0x2a>
 8005582:	2302      	movs	r3, #2
 8005584:	e04b      	b.n	800561e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00c      	beq.n	80055a6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800558c:	f04f 32ff 	mov.w	r2, #4294967295
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	69b8      	ldr	r0, [r7, #24]
 8005594:	f7ff fec8 	bl	8005328 <put_fat>
 8005598:	4603      	mov	r3, r0
 800559a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800559c:	7ffb      	ldrb	r3, [r7, #31]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <remove_chain+0x4a>
 80055a2:	7ffb      	ldrb	r3, [r7, #31]
 80055a4:	e03b      	b.n	800561e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff fdea 	bl	8005182 <get_fat>
 80055ae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d031      	beq.n	800561a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <remove_chain+0x64>
 80055bc:	2302      	movs	r3, #2
 80055be:	e02e      	b.n	800561e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d101      	bne.n	80055cc <remove_chain+0x70>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e028      	b.n	800561e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80055cc:	2200      	movs	r2, #0
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	69b8      	ldr	r0, [r7, #24]
 80055d2:	f7ff fea9 	bl	8005328 <put_fat>
 80055d6:	4603      	mov	r3, r0
 80055d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80055da:	7ffb      	ldrb	r3, [r7, #31]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <remove_chain+0x88>
 80055e0:	7ffb      	ldrb	r3, [r7, #31]
 80055e2:	e01c      	b.n	800561e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	3b02      	subs	r3, #2
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d20b      	bcs.n	800560a <remove_chain+0xae>
			fs->free_clst++;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	791b      	ldrb	r3, [r3, #4]
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	b2da      	uxtb	r2, r3
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	d3c6      	bcc.n	80055a6 <remove_chain+0x4a>
 8005618:	e000      	b.n	800561c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800561a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b088      	sub	sp, #32
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10d      	bne.n	8005658 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <create_chain+0x2c>
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	429a      	cmp	r2, r3
 8005650:	d31b      	bcc.n	800568a <create_chain+0x64>
 8005652:	2301      	movs	r3, #1
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e018      	b.n	800568a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff fd91 	bl	8005182 <get_fat>
 8005660:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d801      	bhi.n	800566c <create_chain+0x46>
 8005668:	2301      	movs	r3, #1
 800566a:	e070      	b.n	800574e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005672:	d101      	bne.n	8005678 <create_chain+0x52>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	e06a      	b.n	800574e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	429a      	cmp	r2, r3
 8005680:	d201      	bcs.n	8005686 <create_chain+0x60>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	e063      	b.n	800574e <create_chain+0x128>
		scl = clst;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3301      	adds	r3, #1
 8005692:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	429a      	cmp	r2, r3
 800569c:	d307      	bcc.n	80056ae <create_chain+0x88>
				ncl = 2;
 800569e:	2302      	movs	r3, #2
 80056a0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d901      	bls.n	80056ae <create_chain+0x88>
 80056aa:	2300      	movs	r3, #0
 80056ac:	e04f      	b.n	800574e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80056ae:	69f9      	ldr	r1, [r7, #28]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff fd66 	bl	8005182 <get_fat>
 80056b6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00e      	beq.n	80056dc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d003      	beq.n	80056cc <create_chain+0xa6>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d101      	bne.n	80056d0 <create_chain+0xaa>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	e03e      	b.n	800574e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d1da      	bne.n	800568e <create_chain+0x68>
 80056d8:	2300      	movs	r3, #0
 80056da:	e038      	b.n	800574e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80056dc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	69f9      	ldr	r1, [r7, #28]
 80056e4:	6938      	ldr	r0, [r7, #16]
 80056e6:	f7ff fe1f 	bl	8005328 <put_fat>
 80056ea:	4603      	mov	r3, r0
 80056ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <create_chain+0xe2>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d006      	beq.n	8005708 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	6938      	ldr	r0, [r7, #16]
 8005700:	f7ff fe12 	bl	8005328 <put_fat>
 8005704:	4603      	mov	r3, r0
 8005706:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d116      	bne.n	800573c <create_chain+0x116>
		fs->last_clst = ncl;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	3b02      	subs	r3, #2
 800571e:	429a      	cmp	r2, r3
 8005720:	d804      	bhi.n	800572c <create_chain+0x106>
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	1e5a      	subs	r2, r3, #1
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	791b      	ldrb	r3, [r3, #4]
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	b2da      	uxtb	r2, r3
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	711a      	strb	r2, [r3, #4]
 800573a:	e007      	b.n	800574c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d102      	bne.n	8005748 <create_chain+0x122>
 8005742:	f04f 33ff 	mov.w	r3, #4294967295
 8005746:	e000      	b.n	800574a <create_chain+0x124>
 8005748:	2301      	movs	r3, #1
 800574a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800574c:	69fb      	ldr	r3, [r7, #28]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	3304      	adds	r3, #4
 800576c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	899b      	ldrh	r3, [r3, #12]
 8005772:	461a      	mov	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	fbb3 f3f2 	udiv	r3, r3, r2
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	8952      	ldrh	r2, [r2, #10]
 800577e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005782:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1d1a      	adds	r2, r3, #4
 8005788:	613a      	str	r2, [r7, #16]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <clmt_clust+0x42>
 8005794:	2300      	movs	r3, #0
 8005796:	e010      	b.n	80057ba <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	d307      	bcc.n	80057b0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	3304      	adds	r3, #4
 80057ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80057ae:	e7e9      	b.n	8005784 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80057b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	4413      	add	r3, r2
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057dc:	d204      	bcs.n	80057e8 <dir_sdi+0x22>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <dir_sdi+0x26>
		return FR_INT_ERR;
 80057e8:	2302      	movs	r3, #2
 80057ea:	e071      	b.n	80058d0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <dir_sdi+0x46>
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d902      	bls.n	800580c <dir_sdi+0x46>
		clst = fs->dirbase;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10c      	bne.n	800582c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	8912      	ldrh	r2, [r2, #8]
 800581a:	4293      	cmp	r3, r2
 800581c:	d301      	bcc.n	8005822 <dir_sdi+0x5c>
 800581e:	2302      	movs	r3, #2
 8005820:	e056      	b.n	80058d0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	61da      	str	r2, [r3, #28]
 800582a:	e02d      	b.n	8005888 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	895b      	ldrh	r3, [r3, #10]
 8005830:	461a      	mov	r2, r3
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	899b      	ldrh	r3, [r3, #12]
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800583c:	e019      	b.n	8005872 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6979      	ldr	r1, [r7, #20]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fc9d 	bl	8005182 <get_fat>
 8005848:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d101      	bne.n	8005856 <dir_sdi+0x90>
 8005852:	2301      	movs	r3, #1
 8005854:	e03c      	b.n	80058d0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d904      	bls.n	8005866 <dir_sdi+0xa0>
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	429a      	cmp	r2, r3
 8005864:	d301      	bcc.n	800586a <dir_sdi+0xa4>
 8005866:	2302      	movs	r3, #2
 8005868:	e032      	b.n	80058d0 <dir_sdi+0x10a>
			ofs -= csz;
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	429a      	cmp	r2, r3
 8005878:	d2e1      	bcs.n	800583e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800587a:	6979      	ldr	r1, [r7, #20]
 800587c:	6938      	ldr	r0, [r7, #16]
 800587e:	f7ff fc61 	bl	8005144 <clust2sect>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <dir_sdi+0xd4>
 8005896:	2302      	movs	r3, #2
 8005898:	e01a      	b.n	80058d0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	899b      	ldrh	r3, [r3, #12]
 80058a2:	4619      	mov	r1, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80058aa:	441a      	add	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	899b      	ldrh	r3, [r3, #12]
 80058ba:	461a      	mov	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	fbb3 f0f2 	udiv	r0, r3, r2
 80058c2:	fb00 f202 	mul.w	r2, r0, r2
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	18ca      	adds	r2, r1, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	3320      	adds	r3, #32
 80058ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <dir_next+0x28>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058fe:	d301      	bcc.n	8005904 <dir_next+0x2c>
 8005900:	2304      	movs	r3, #4
 8005902:	e0bb      	b.n	8005a7c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	899b      	ldrh	r3, [r3, #12]
 8005908:	461a      	mov	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005910:	fb01 f202 	mul.w	r2, r1, r2
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 809d 	bne.w	8005a56 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	8912      	ldrh	r2, [r2, #8]
 8005936:	4293      	cmp	r3, r2
 8005938:	f0c0 808d 	bcc.w	8005a56 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	61da      	str	r2, [r3, #28]
 8005942:	2304      	movs	r3, #4
 8005944:	e09a      	b.n	8005a7c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	899b      	ldrh	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	8952      	ldrh	r2, [r2, #10]
 8005956:	3a01      	subs	r2, #1
 8005958:	4013      	ands	r3, r2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d17b      	bne.n	8005a56 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7ff fc0b 	bl	8005182 <get_fat>
 800596c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d801      	bhi.n	8005978 <dir_next+0xa0>
 8005974:	2302      	movs	r3, #2
 8005976:	e081      	b.n	8005a7c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	d101      	bne.n	8005984 <dir_next+0xac>
 8005980:	2301      	movs	r3, #1
 8005982:	e07b      	b.n	8005a7c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	429a      	cmp	r2, r3
 800598c:	d359      	bcc.n	8005a42 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	61da      	str	r2, [r3, #28]
 800599a:	2304      	movs	r3, #4
 800599c:	e06e      	b.n	8005a7c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f7ff fe3d 	bl	8005626 <create_chain>
 80059ac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <dir_next+0xe0>
 80059b4:	2307      	movs	r3, #7
 80059b6:	e061      	b.n	8005a7c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <dir_next+0xea>
 80059be:	2302      	movs	r3, #2
 80059c0:	e05c      	b.n	8005a7c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d101      	bne.n	80059ce <dir_next+0xf6>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e056      	b.n	8005a7c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7ff fad6 	bl	8004f80 <sync_window>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <dir_next+0x106>
 80059da:	2301      	movs	r3, #1
 80059dc:	e04e      	b.n	8005a7c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	899b      	ldrh	r3, [r3, #12]
 80059e8:	461a      	mov	r2, r3
 80059ea:	2100      	movs	r1, #0
 80059ec:	f7ff f8ff 	bl	8004bee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	6979      	ldr	r1, [r7, #20]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff fba4 	bl	8005144 <clust2sect>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a02:	e012      	b.n	8005a2a <dir_next+0x152>
						fs->wflag = 1;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7ff fab8 	bl	8004f80 <sync_window>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <dir_next+0x142>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e030      	b.n	8005a7c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	895b      	ldrh	r3, [r3, #10]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d3e6      	bcc.n	8005a04 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad2      	subs	r2, r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff fb7a 	bl	8005144 <clust2sect>
 8005a50:	4602      	mov	r2, r0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	899b      	ldrh	r3, [r3, #12]
 8005a66:	461a      	mov	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a6e:	fb00 f202 	mul.w	r2, r0, r2
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	18ca      	adds	r2, r1, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005a94:	2100      	movs	r1, #0
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fe95 	bl	80057c6 <dir_sdi>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d12b      	bne.n	8005afe <dir_alloc+0x7a>
		n = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff faa9 	bl	8005008 <move_window>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d11d      	bne.n	8005afc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2be5      	cmp	r3, #229	@ 0xe5
 8005ac8:	d004      	beq.n	8005ad4 <dir_alloc+0x50>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d102      	bne.n	8005ae8 <dir_alloc+0x64>
 8005ae2:	e00c      	b.n	8005afe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005ae8:	2101      	movs	r1, #1
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff fef4 	bl	80058d8 <dir_next>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0d7      	beq.n	8005aaa <dir_alloc+0x26>
 8005afa:	e000      	b.n	8005afe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005afc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d101      	bne.n	8005b08 <dir_alloc+0x84>
 8005b04:	2307      	movs	r3, #7
 8005b06:	75fb      	strb	r3, [r7, #23]
	return res;
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	331a      	adds	r3, #26
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe ffc1 	bl	8004aa8 <ld_word>
 8005b26:	4603      	mov	r3, r0
 8005b28:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d109      	bne.n	8005b46 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	3314      	adds	r3, #20
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe ffb6 	bl	8004aa8 <ld_word>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005b46:	68fb      	ldr	r3, [r7, #12]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	331a      	adds	r3, #26
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	b292      	uxth	r2, r2
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe ffd9 	bl	8004b1e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d109      	bne.n	8005b88 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f103 0214 	add.w	r2, r3, #20
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f7fe ffcb 	bl	8004b1e <st_word>
	}
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff fe10 	bl	80057c6 <dir_sdi>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <dir_find+0x24>
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
 8005bb2:	e03e      	b.n	8005c32 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6938      	ldr	r0, [r7, #16]
 8005bbc:	f7ff fa24 	bl	8005008 <move_window>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d12f      	bne.n	8005c2a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <dir_find+0x4e>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	75fb      	strb	r3, [r7, #23]
 8005bdc:	e028      	b.n	8005c30 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	330b      	adds	r3, #11
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	330b      	adds	r3, #11
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <dir_find+0x86>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a18      	ldr	r0, [r3, #32]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3324      	adds	r3, #36	@ 0x24
 8005c08:	220b      	movs	r2, #11
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f7ff f80a 	bl	8004c24 <mem_cmp>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00b      	beq.n	8005c2e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005c16:	2100      	movs	r1, #0
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff fe5d 	bl	80058d8 <dir_next>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0c5      	beq.n	8005bb4 <dir_find+0x24>
 8005c28:	e002      	b.n	8005c30 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005c2a:	bf00      	nop
 8005c2c:	e000      	b.n	8005c30 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005c2e:	bf00      	nop

	return res;
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005c48:	2101      	movs	r1, #1
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff ff1a 	bl	8005a84 <dir_alloc>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d11c      	bne.n	8005c94 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	68b8      	ldr	r0, [r7, #8]
 8005c62:	f7ff f9d1 	bl	8005008 <move_window>
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d111      	bne.n	8005c94 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	2220      	movs	r2, #32
 8005c76:	2100      	movs	r1, #0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe ffb8 	bl	8004bee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a18      	ldr	r0, [r3, #32]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3324      	adds	r3, #36	@ 0x24
 8005c86:	220b      	movs	r2, #11
 8005c88:	4619      	mov	r1, r3
 8005c8a:	f7fe ff8f 	bl	8004bac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2201      	movs	r2, #1
 8005c92:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2200      	movs	r2, #0
 8005cac:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d04f      	beq.n	8005d56 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8005cbe:	e022      	b.n	8005d06 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1c59      	adds	r1, r3, #1
 8005cc8:	6179      	str	r1, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d016      	beq.n	8005d04 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b05      	cmp	r3, #5
 8005cda:	d101      	bne.n	8005ce0 <get_fileinfo+0x42>
 8005cdc:	23e5      	movs	r3, #229	@ 0xe5
 8005cde:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d106      	bne.n	8005cf4 <get_fileinfo+0x56>
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	613a      	str	r2, [r7, #16]
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	4413      	add	r3, r2
 8005cf0:	222e      	movs	r2, #46	@ 0x2e
 8005cf2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	613a      	str	r2, [r7, #16]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	7bfa      	ldrb	r2, [r7, #15]
 8005d00:	725a      	strb	r2, [r3, #9]
 8005d02:	e000      	b.n	8005d06 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8005d04:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b0a      	cmp	r3, #10
 8005d0a:	d9d9      	bls.n	8005cc0 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4413      	add	r3, r2
 8005d12:	3309      	adds	r3, #9
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	7ada      	ldrb	r2, [r3, #11]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	331c      	adds	r3, #28
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fe fed5 	bl	8004ad8 <ld_dword>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	3316      	adds	r3, #22
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fecc 	bl	8004ad8 <ld_dword>
 8005d40:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	80da      	strh	r2, [r3, #6]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	0c1b      	lsrs	r3, r3, #16
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	809a      	strh	r2, [r3, #4]
 8005d54:	e000      	b.n	8005d58 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005d56:	bf00      	nop
}
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3324      	adds	r3, #36	@ 0x24
 8005d74:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005d76:	220b      	movs	r2, #11
 8005d78:	2120      	movs	r1, #32
 8005d7a:	68b8      	ldr	r0, [r7, #8]
 8005d7c:	f7fe ff37 	bl	8004bee <mem_set>
	si = i = 0; ni = 8;
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	2308      	movs	r3, #8
 8005d8a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	61fa      	str	r2, [r7, #28]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005d9a:	7efb      	ldrb	r3, [r7, #27]
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d94e      	bls.n	8005e3e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005da0:	7efb      	ldrb	r3, [r7, #27]
 8005da2:	2b2f      	cmp	r3, #47	@ 0x2f
 8005da4:	d006      	beq.n	8005db4 <create_name+0x54>
 8005da6:	7efb      	ldrb	r3, [r7, #27]
 8005da8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005daa:	d110      	bne.n	8005dce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005dac:	e002      	b.n	8005db4 <create_name+0x54>
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	3301      	adds	r3, #1
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8005dbe:	d0f6      	beq.n	8005dae <create_name+0x4e>
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005dca:	d0f0      	beq.n	8005dae <create_name+0x4e>
			break;
 8005dcc:	e038      	b.n	8005e40 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005dce:	7efb      	ldrb	r3, [r7, #27]
 8005dd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dd2:	d003      	beq.n	8005ddc <create_name+0x7c>
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d30c      	bcc.n	8005df6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b0b      	cmp	r3, #11
 8005de0:	d002      	beq.n	8005de8 <create_name+0x88>
 8005de2:	7efb      	ldrb	r3, [r7, #27]
 8005de4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de6:	d001      	beq.n	8005dec <create_name+0x8c>
 8005de8:	2306      	movs	r3, #6
 8005dea:	e044      	b.n	8005e76 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005dec:	2308      	movs	r3, #8
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	230b      	movs	r3, #11
 8005df2:	617b      	str	r3, [r7, #20]
			continue;
 8005df4:	e022      	b.n	8005e3c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005df6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da04      	bge.n	8005e08 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005dfe:	7efb      	ldrb	r3, [r7, #27]
 8005e00:	3b80      	subs	r3, #128	@ 0x80
 8005e02:	4a1f      	ldr	r2, [pc, #124]	@ (8005e80 <create_name+0x120>)
 8005e04:	5cd3      	ldrb	r3, [r2, r3]
 8005e06:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005e08:	7efb      	ldrb	r3, [r7, #27]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	481d      	ldr	r0, [pc, #116]	@ (8005e84 <create_name+0x124>)
 8005e0e:	f7fe ff30 	bl	8004c72 <chk_chr>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <create_name+0xbc>
 8005e18:	2306      	movs	r3, #6
 8005e1a:	e02c      	b.n	8005e76 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005e1c:	7efb      	ldrb	r3, [r7, #27]
 8005e1e:	2b60      	cmp	r3, #96	@ 0x60
 8005e20:	d905      	bls.n	8005e2e <create_name+0xce>
 8005e22:	7efb      	ldrb	r3, [r7, #27]
 8005e24:	2b7a      	cmp	r3, #122	@ 0x7a
 8005e26:	d802      	bhi.n	8005e2e <create_name+0xce>
 8005e28:	7efb      	ldrb	r3, [r7, #27]
 8005e2a:	3b20      	subs	r3, #32
 8005e2c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	613a      	str	r2, [r7, #16]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	4413      	add	r3, r2
 8005e38:	7efa      	ldrb	r2, [r7, #27]
 8005e3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005e3c:	e7a6      	b.n	8005d8c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	441a      	add	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <create_name+0xf4>
 8005e50:	2306      	movs	r3, #6
 8005e52:	e010      	b.n	8005e76 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2be5      	cmp	r3, #229	@ 0xe5
 8005e5a:	d102      	bne.n	8005e62 <create_name+0x102>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2205      	movs	r2, #5
 8005e60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005e62:	7efb      	ldrb	r3, [r7, #27]
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d801      	bhi.n	8005e6c <create_name+0x10c>
 8005e68:	2204      	movs	r2, #4
 8005e6a:	e000      	b.n	8005e6e <create_name+0x10e>
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	330b      	adds	r3, #11
 8005e72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005e74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	08007d70 	.word	0x08007d70
 8005e84:	08007d00 	.word	0x08007d00

08005e88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005e9c:	e002      	b.n	8005ea4 <follow_path+0x1c>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005eaa:	d0f8      	beq.n	8005e9e <follow_path+0x16>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005eb2:	d0f4      	beq.n	8005e9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b1f      	cmp	r3, #31
 8005ec0:	d80a      	bhi.n	8005ed8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2280      	movs	r2, #128	@ 0x80
 8005ec6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005eca:	2100      	movs	r1, #0
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fc7a 	bl	80057c6 <dir_sdi>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	75fb      	strb	r3, [r7, #23]
 8005ed6:	e048      	b.n	8005f6a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ed8:	463b      	mov	r3, r7
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff ff3f 	bl	8005d60 <create_name>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d139      	bne.n	8005f60 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff fe4f 	bl	8005b90 <dir_find>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005efc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d12c      	bne.n	8005f64 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f0a:	7afb      	ldrb	r3, [r7, #11]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d127      	bne.n	8005f64 <follow_path+0xdc>
 8005f14:	2305      	movs	r3, #5
 8005f16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005f18:	e024      	b.n	8005f64 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d121      	bne.n	8005f68 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	799b      	ldrb	r3, [r3, #6]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005f30:	2305      	movs	r3, #5
 8005f32:	75fb      	strb	r3, [r7, #23]
 8005f34:	e019      	b.n	8005f6a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	8992      	ldrh	r2, [r2, #12]
 8005f44:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f48:	fb00 f202 	mul.w	r2, r0, r2
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	440b      	add	r3, r1
 8005f50:	4619      	mov	r1, r3
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fddd 	bl	8005b12 <ld_clust>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f5e:	e7bb      	b.n	8005ed8 <follow_path+0x50>
			if (res != FR_OK) break;
 8005f60:	bf00      	nop
 8005f62:	e002      	b.n	8005f6a <follow_path+0xe2>
				break;
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f68:	bf00      	nop
			}
		}
	}

	return res;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f80:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d031      	beq.n	8005fee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e002      	b.n	8005f98 <get_ldnumber+0x24>
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	3301      	adds	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d903      	bls.n	8005fa8 <get_ldnumber+0x34>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b3a      	cmp	r3, #58	@ 0x3a
 8005fa6:	d1f4      	bne.n	8005f92 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b3a      	cmp	r3, #58	@ 0x3a
 8005fae:	d11c      	bne.n	8005fea <get_ldnumber+0x76>
			tp = *path;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	60fa      	str	r2, [r7, #12]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	3b30      	subs	r3, #48	@ 0x30
 8005fc0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b09      	cmp	r3, #9
 8005fc6:	d80e      	bhi.n	8005fe6 <get_ldnumber+0x72>
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d10a      	bne.n	8005fe6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d107      	bne.n	8005fe6 <get_ldnumber+0x72>
					vol = (int)i;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	e002      	b.n	8005ff0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005fee:	693b      	ldr	r3, [r7, #16]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	70da      	strb	r2, [r3, #3]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f04f 32ff 	mov.w	r2, #4294967295
 8006012:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fe fff6 	bl	8005008 <move_window>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <check_fs+0x2a>
 8006022:	2304      	movs	r3, #4
 8006024:	e038      	b.n	8006098 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3334      	adds	r3, #52	@ 0x34
 800602a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe fd3a 	bl	8004aa8 <ld_word>
 8006034:	4603      	mov	r3, r0
 8006036:	461a      	mov	r2, r3
 8006038:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800603c:	429a      	cmp	r2, r3
 800603e:	d001      	beq.n	8006044 <check_fs+0x48>
 8006040:	2303      	movs	r3, #3
 8006042:	e029      	b.n	8006098 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800604a:	2be9      	cmp	r3, #233	@ 0xe9
 800604c:	d009      	beq.n	8006062 <check_fs+0x66>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006054:	2beb      	cmp	r3, #235	@ 0xeb
 8006056:	d11e      	bne.n	8006096 <check_fs+0x9a>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800605e:	2b90      	cmp	r3, #144	@ 0x90
 8006060:	d119      	bne.n	8006096 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3334      	adds	r3, #52	@ 0x34
 8006066:	3336      	adds	r3, #54	@ 0x36
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe fd35 	bl	8004ad8 <ld_dword>
 800606e:	4603      	mov	r3, r0
 8006070:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006074:	4a0a      	ldr	r2, [pc, #40]	@ (80060a0 <check_fs+0xa4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <check_fs+0x82>
 800607a:	2300      	movs	r3, #0
 800607c:	e00c      	b.n	8006098 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3334      	adds	r3, #52	@ 0x34
 8006082:	3352      	adds	r3, #82	@ 0x52
 8006084:	4618      	mov	r0, r3
 8006086:	f7fe fd27 	bl	8004ad8 <ld_dword>
 800608a:	4603      	mov	r3, r0
 800608c:	4a05      	ldr	r2, [pc, #20]	@ (80060a4 <check_fs+0xa8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d101      	bne.n	8006096 <check_fs+0x9a>
 8006092:	2300      	movs	r3, #0
 8006094:	e000      	b.n	8006098 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006096:	2302      	movs	r3, #2
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	00544146 	.word	0x00544146
 80060a4:	33544146 	.word	0x33544146

080060a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b096      	sub	sp, #88	@ 0x58
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	4613      	mov	r3, r2
 80060b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff ff59 	bl	8005f74 <get_ldnumber>
 80060c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80060c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da01      	bge.n	80060ce <find_volume+0x26>
 80060ca:	230b      	movs	r3, #11
 80060cc:	e262      	b.n	8006594 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80060ce:	4a9f      	ldr	r2, [pc, #636]	@ (800634c <find_volume+0x2a4>)
 80060d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80060d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <find_volume+0x3a>
 80060de:	230c      	movs	r3, #12
 80060e0:	e258      	b.n	8006594 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80060f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01a      	beq.n	800612e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80060f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe fc33 	bl	8004968 <disk_status>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006108:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10c      	bne.n	800612e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <find_volume+0x82>
 800611a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006126:	230a      	movs	r3, #10
 8006128:	e234      	b.n	8006594 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800612a:	2300      	movs	r3, #0
 800612c:	e232      	b.n	8006594 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800612e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006136:	b2da      	uxtb	r2, r3
 8006138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800613c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fc2b 	bl	800499c <disk_initialize>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800614c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006158:	2303      	movs	r3, #3
 800615a:	e21b      	b.n	8006594 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <find_volume+0xca>
 8006162:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800616e:	230a      	movs	r3, #10
 8006170:	e210      	b.n	8006594 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006174:	7858      	ldrb	r0, [r3, #1]
 8006176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006178:	330c      	adds	r3, #12
 800617a:	461a      	mov	r2, r3
 800617c:	2102      	movs	r1, #2
 800617e:	f7fe fc75 	bl	8004a6c <disk_ioctl>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <find_volume+0xe4>
 8006188:	2301      	movs	r3, #1
 800618a:	e203      	b.n	8006594 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800618c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618e:	899b      	ldrh	r3, [r3, #12]
 8006190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006194:	d80d      	bhi.n	80061b2 <find_volume+0x10a>
 8006196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006198:	899b      	ldrh	r3, [r3, #12]
 800619a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800619e:	d308      	bcc.n	80061b2 <find_volume+0x10a>
 80061a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a2:	899b      	ldrh	r3, [r3, #12]
 80061a4:	461a      	mov	r2, r3
 80061a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a8:	899b      	ldrh	r3, [r3, #12]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <find_volume+0x10e>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e1ee      	b.n	8006594 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80061ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80061be:	f7ff ff1d 	bl	8005ffc <check_fs>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80061c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d149      	bne.n	8006264 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061d0:	2300      	movs	r3, #0
 80061d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80061d4:	e01e      	b.n	8006214 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80061dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80061e4:	4413      	add	r3, r2
 80061e6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	3304      	adds	r3, #4
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d006      	beq.n	8006200 <find_volume+0x158>
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	3308      	adds	r3, #8
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fc6e 	bl	8004ad8 <ld_dword>
 80061fc:	4602      	mov	r2, r0
 80061fe:	e000      	b.n	8006202 <find_volume+0x15a>
 8006200:	2200      	movs	r2, #0
 8006202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	3358      	adds	r3, #88	@ 0x58
 8006208:	443b      	add	r3, r7
 800620a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800620e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006210:	3301      	adds	r3, #1
 8006212:	643b      	str	r3, [r7, #64]	@ 0x40
 8006214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006216:	2b03      	cmp	r3, #3
 8006218:	d9dd      	bls.n	80061d6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800621a:	2300      	movs	r3, #0
 800621c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800621e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <find_volume+0x182>
 8006224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006226:	3b01      	subs	r3, #1
 8006228:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800622a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	3358      	adds	r3, #88	@ 0x58
 8006230:	443b      	add	r3, r7
 8006232:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006236:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <find_volume+0x1a2>
 800623e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006240:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006242:	f7ff fedb 	bl	8005ffc <check_fs>
 8006246:	4603      	mov	r3, r0
 8006248:	e000      	b.n	800624c <find_volume+0x1a4>
 800624a:	2303      	movs	r3, #3
 800624c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006250:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006254:	2b01      	cmp	r3, #1
 8006256:	d905      	bls.n	8006264 <find_volume+0x1bc>
 8006258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800625a:	3301      	adds	r3, #1
 800625c:	643b      	str	r3, [r7, #64]	@ 0x40
 800625e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006260:	2b03      	cmp	r3, #3
 8006262:	d9e2      	bls.n	800622a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006264:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006268:	2b04      	cmp	r3, #4
 800626a:	d101      	bne.n	8006270 <find_volume+0x1c8>
 800626c:	2301      	movs	r3, #1
 800626e:	e191      	b.n	8006594 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006270:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006274:	2b01      	cmp	r3, #1
 8006276:	d901      	bls.n	800627c <find_volume+0x1d4>
 8006278:	230d      	movs	r3, #13
 800627a:	e18b      	b.n	8006594 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800627c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627e:	3334      	adds	r3, #52	@ 0x34
 8006280:	330b      	adds	r3, #11
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fc10 	bl	8004aa8 <ld_word>
 8006288:	4603      	mov	r3, r0
 800628a:	461a      	mov	r2, r3
 800628c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628e:	899b      	ldrh	r3, [r3, #12]
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <find_volume+0x1f0>
 8006294:	230d      	movs	r3, #13
 8006296:	e17d      	b.n	8006594 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629a:	3334      	adds	r3, #52	@ 0x34
 800629c:	3316      	adds	r3, #22
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe fc02 	bl	8004aa8 <ld_word>
 80062a4:	4603      	mov	r3, r0
 80062a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80062a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <find_volume+0x214>
 80062ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b0:	3334      	adds	r3, #52	@ 0x34
 80062b2:	3324      	adds	r3, #36	@ 0x24
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe fc0f 	bl	8004ad8 <ld_dword>
 80062ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80062bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062c0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80062c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	789b      	ldrb	r3, [r3, #2]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d005      	beq.n	80062e0 <find_volume+0x238>
 80062d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d6:	789b      	ldrb	r3, [r3, #2]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d001      	beq.n	80062e0 <find_volume+0x238>
 80062dc:	230d      	movs	r3, #13
 80062de:	e159      	b.n	8006594 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	789b      	ldrb	r3, [r3, #2]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e8:	fb02 f303 	mul.w	r3, r2, r3
 80062ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80062ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f4:	461a      	mov	r2, r3
 80062f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80062fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fc:	895b      	ldrh	r3, [r3, #10]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <find_volume+0x26c>
 8006302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006304:	895b      	ldrh	r3, [r3, #10]
 8006306:	461a      	mov	r2, r3
 8006308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630a:	895b      	ldrh	r3, [r3, #10]
 800630c:	3b01      	subs	r3, #1
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <find_volume+0x270>
 8006314:	230d      	movs	r3, #13
 8006316:	e13d      	b.n	8006594 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	3334      	adds	r3, #52	@ 0x34
 800631c:	3311      	adds	r3, #17
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fbc2 	bl	8004aa8 <ld_word>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632e:	891b      	ldrh	r3, [r3, #8]
 8006330:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006332:	8992      	ldrh	r2, [r2, #12]
 8006334:	0952      	lsrs	r2, r2, #5
 8006336:	b292      	uxth	r2, r2
 8006338:	fbb3 f1f2 	udiv	r1, r3, r2
 800633c:	fb01 f202 	mul.w	r2, r1, r2
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	b29b      	uxth	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <find_volume+0x2a8>
 8006348:	230d      	movs	r3, #13
 800634a:	e123      	b.n	8006594 <find_volume+0x4ec>
 800634c:	20002200 	.word	0x20002200

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	3334      	adds	r3, #52	@ 0x34
 8006354:	3313      	adds	r3, #19
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fba6 	bl	8004aa8 <ld_word>
 800635c:	4603      	mov	r3, r0
 800635e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <find_volume+0x2cc>
 8006366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006368:	3334      	adds	r3, #52	@ 0x34
 800636a:	3320      	adds	r3, #32
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fbb3 	bl	8004ad8 <ld_dword>
 8006372:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006376:	3334      	adds	r3, #52	@ 0x34
 8006378:	330e      	adds	r3, #14
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fb94 	bl	8004aa8 <ld_word>
 8006380:	4603      	mov	r3, r0
 8006382:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006384:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <find_volume+0x2e6>
 800638a:	230d      	movs	r3, #13
 800638c:	e102      	b.n	8006594 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800638e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006392:	4413      	add	r3, r2
 8006394:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006396:	8911      	ldrh	r1, [r2, #8]
 8006398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800639a:	8992      	ldrh	r2, [r2, #12]
 800639c:	0952      	lsrs	r2, r2, #5
 800639e:	b292      	uxth	r2, r2
 80063a0:	fbb1 f2f2 	udiv	r2, r1, r2
 80063a4:	b292      	uxth	r2, r2
 80063a6:	4413      	add	r3, r2
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80063aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d201      	bcs.n	80063b6 <find_volume+0x30e>
 80063b2:	230d      	movs	r3, #13
 80063b4:	e0ee      	b.n	8006594 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80063b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063be:	8952      	ldrh	r2, [r2, #10]
 80063c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80063c4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <find_volume+0x328>
 80063cc:	230d      	movs	r3, #13
 80063ce:	e0e1      	b.n	8006594 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80063d0:	2303      	movs	r3, #3
 80063d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80063dc:	4293      	cmp	r3, r2
 80063de:	d802      	bhi.n	80063e6 <find_volume+0x33e>
 80063e0:	2302      	movs	r3, #2
 80063e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d802      	bhi.n	80063f6 <find_volume+0x34e>
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	1c9a      	adds	r2, r3, #2
 80063fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006402:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006404:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006408:	441a      	add	r2, r3
 800640a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800640e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006412:	441a      	add	r2, r3
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8006418:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800641c:	2b03      	cmp	r3, #3
 800641e:	d11e      	bne.n	800645e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006422:	3334      	adds	r3, #52	@ 0x34
 8006424:	332a      	adds	r3, #42	@ 0x2a
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe fb3e 	bl	8004aa8 <ld_word>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <find_volume+0x38e>
 8006432:	230d      	movs	r3, #13
 8006434:	e0ae      	b.n	8006594 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	891b      	ldrh	r3, [r3, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <find_volume+0x39a>
 800643e:	230d      	movs	r3, #13
 8006440:	e0a8      	b.n	8006594 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006444:	3334      	adds	r3, #52	@ 0x34
 8006446:	332c      	adds	r3, #44	@ 0x2c
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe fb45 	bl	8004ad8 <ld_dword>
 800644e:	4602      	mov	r2, r0
 8006450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006452:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	647b      	str	r3, [r7, #68]	@ 0x44
 800645c:	e01f      	b.n	800649e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800645e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006460:	891b      	ldrh	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <find_volume+0x3c2>
 8006466:	230d      	movs	r3, #13
 8006468:	e094      	b.n	8006594 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800646e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006470:	441a      	add	r2, r3
 8006472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006474:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006476:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800647a:	2b02      	cmp	r3, #2
 800647c:	d103      	bne.n	8006486 <find_volume+0x3de>
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	e00a      	b.n	800649c <find_volume+0x3f4>
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	4613      	mov	r3, r2
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	4413      	add	r3, r2
 8006490:	085a      	lsrs	r2, r3, #1
 8006492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800649c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a0:	69da      	ldr	r2, [r3, #28]
 80064a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a4:	899b      	ldrh	r3, [r3, #12]
 80064a6:	4619      	mov	r1, r3
 80064a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064aa:	440b      	add	r3, r1
 80064ac:	3b01      	subs	r3, #1
 80064ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80064b0:	8989      	ldrh	r1, [r1, #12]
 80064b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d201      	bcs.n	80064be <find_volume+0x416>
 80064ba:	230d      	movs	r3, #13
 80064bc:	e06a      	b.n	8006594 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80064be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	615a      	str	r2, [r3, #20]
 80064c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80064ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d0:	2280      	movs	r2, #128	@ 0x80
 80064d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80064d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d149      	bne.n	8006570 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80064dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064de:	3334      	adds	r3, #52	@ 0x34
 80064e0:	3330      	adds	r3, #48	@ 0x30
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fae0 	bl	8004aa8 <ld_word>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d140      	bne.n	8006570 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80064ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064f0:	3301      	adds	r3, #1
 80064f2:	4619      	mov	r1, r3
 80064f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80064f6:	f7fe fd87 	bl	8005008 <move_window>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d137      	bne.n	8006570 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006502:	2200      	movs	r2, #0
 8006504:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	3334      	adds	r3, #52	@ 0x34
 800650a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe faca 	bl	8004aa8 <ld_word>
 8006514:	4603      	mov	r3, r0
 8006516:	461a      	mov	r2, r3
 8006518:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800651c:	429a      	cmp	r2, r3
 800651e:	d127      	bne.n	8006570 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006522:	3334      	adds	r3, #52	@ 0x34
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe fad7 	bl	8004ad8 <ld_dword>
 800652a:	4603      	mov	r3, r0
 800652c:	4a1b      	ldr	r2, [pc, #108]	@ (800659c <find_volume+0x4f4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d11e      	bne.n	8006570 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	3334      	adds	r3, #52	@ 0x34
 8006536:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe facc 	bl	8004ad8 <ld_dword>
 8006540:	4603      	mov	r3, r0
 8006542:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <find_volume+0x4f8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d113      	bne.n	8006570 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	3334      	adds	r3, #52	@ 0x34
 800654c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fac1 	bl	8004ad8 <ld_dword>
 8006556:	4602      	mov	r2, r0
 8006558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800655c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655e:	3334      	adds	r3, #52	@ 0x34
 8006560:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe fab7 	bl	8004ad8 <ld_dword>
 800656a:	4602      	mov	r2, r0
 800656c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006572:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006576:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006578:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <find_volume+0x4fc>)
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	3301      	adds	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	4b08      	ldr	r3, [pc, #32]	@ (80065a4 <find_volume+0x4fc>)
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	4b07      	ldr	r3, [pc, #28]	@ (80065a4 <find_volume+0x4fc>)
 8006586:	881a      	ldrh	r2, [r3, #0]
 8006588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800658c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800658e:	f7fe fcd3 	bl	8004f38 <clear_lock>
#endif
	return FR_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3758      	adds	r7, #88	@ 0x58
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	41615252 	.word	0x41615252
 80065a0:	61417272 	.word	0x61417272
 80065a4:	20002204 	.word	0x20002204

080065a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80065b2:	2309      	movs	r3, #9
 80065b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01c      	beq.n	80065f6 <validate+0x4e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d018      	beq.n	80065f6 <validate+0x4e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <validate+0x4e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	889a      	ldrh	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	88db      	ldrh	r3, [r3, #6]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d10c      	bne.n	80065f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	785b      	ldrb	r3, [r3, #1]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe f9c0 	bl	8004968 <disk_status>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <validate+0x4e>
			res = FR_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d102      	bne.n	8006602 <validate+0x5a>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	e000      	b.n	8006604 <validate+0x5c>
 8006602:	2300      	movs	r3, #0
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	6013      	str	r3, [r2, #0]
	return res;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	4613      	mov	r3, r2
 8006620:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006626:	f107 0310 	add.w	r3, r7, #16
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fca2 	bl	8005f74 <get_ldnumber>
 8006630:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	da01      	bge.n	800663c <f_mount+0x28>
 8006638:	230b      	movs	r3, #11
 800663a:	e02b      	b.n	8006694 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800663c:	4a17      	ldr	r2, [pc, #92]	@ (800669c <f_mount+0x88>)
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006644:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800664c:	69b8      	ldr	r0, [r7, #24]
 800664e:	f7fe fc73 	bl	8004f38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2200      	movs	r2, #0
 8006656:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	490d      	ldr	r1, [pc, #52]	@ (800669c <f_mount+0x88>)
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <f_mount+0x66>
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d001      	beq.n	800667e <f_mount+0x6a>
 800667a:	2300      	movs	r3, #0
 800667c:	e00a      	b.n	8006694 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800667e:	f107 010c 	add.w	r1, r7, #12
 8006682:	f107 0308 	add.w	r3, r7, #8
 8006686:	2200      	movs	r2, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fd0d 	bl	80060a8 <find_volume>
 800668e:	4603      	mov	r3, r0
 8006690:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006692:	7dfb      	ldrb	r3, [r7, #23]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3720      	adds	r7, #32
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20002200 	.word	0x20002200

080066a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b098      	sub	sp, #96	@ 0x60
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <f_open+0x18>
 80066b4:	2309      	movs	r3, #9
 80066b6:	e1b7      	b.n	8006a28 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80066c0:	79fa      	ldrb	r2, [r7, #7]
 80066c2:	f107 0110 	add.w	r1, r7, #16
 80066c6:	f107 0308 	add.w	r3, r7, #8
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff fcec 	bl	80060a8 <find_volume>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80066d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f040 819b 	bne.w	8006a16 <f_open+0x376>
		dj.obj.fs = fs;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	f107 0314 	add.w	r3, r7, #20
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fbcb 	bl	8005e88 <follow_path>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80066f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d118      	bne.n	8006732 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006700:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006704:	b25b      	sxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	da03      	bge.n	8006712 <f_open+0x72>
				res = FR_INVALID_NAME;
 800670a:	2306      	movs	r3, #6
 800670c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006710:	e00f      	b.n	8006732 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	2b01      	cmp	r3, #1
 8006716:	bf8c      	ite	hi
 8006718:	2301      	movhi	r3, #1
 800671a:	2300      	movls	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	f107 0314 	add.w	r3, r7, #20
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fabe 	bl	8004ca8 <chk_lock>
 800672c:	4603      	mov	r3, r0
 800672e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	f003 031c 	and.w	r3, r3, #28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d07f      	beq.n	800683c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800673c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006740:	2b00      	cmp	r3, #0
 8006742:	d017      	beq.n	8006774 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006744:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006748:	2b04      	cmp	r3, #4
 800674a:	d10e      	bne.n	800676a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800674c:	f7fe fb08 	bl	8004d60 <enq_lock>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d006      	beq.n	8006764 <f_open+0xc4>
 8006756:	f107 0314 	add.w	r3, r7, #20
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fa6d 	bl	8005c3a <dir_register>
 8006760:	4603      	mov	r3, r0
 8006762:	e000      	b.n	8006766 <f_open+0xc6>
 8006764:	2312      	movs	r3, #18
 8006766:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	f043 0308 	orr.w	r3, r3, #8
 8006770:	71fb      	strb	r3, [r7, #7]
 8006772:	e010      	b.n	8006796 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006774:	7ebb      	ldrb	r3, [r7, #26]
 8006776:	f003 0311 	and.w	r3, r3, #17
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <f_open+0xe6>
					res = FR_DENIED;
 800677e:	2307      	movs	r3, #7
 8006780:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006784:	e007      	b.n	8006796 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <f_open+0xf6>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006796:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800679a:	2b00      	cmp	r3, #0
 800679c:	d168      	bne.n	8006870 <f_open+0x1d0>
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d063      	beq.n	8006870 <f_open+0x1d0>
				dw = GET_FATTIME();
 80067a8:	f7fd ff72 	bl	8004690 <get_fattime>
 80067ac:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80067ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b0:	330e      	adds	r3, #14
 80067b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fe f9cd 	bl	8004b54 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80067ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067bc:	3316      	adds	r3, #22
 80067be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe f9c7 	bl	8004b54 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80067c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c8:	330b      	adds	r3, #11
 80067ca:	2220      	movs	r2, #32
 80067cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff f99c 	bl	8005b12 <ld_clust>
 80067da:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80067e0:	2200      	movs	r2, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff f9b4 	bl	8005b50 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80067e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ea:	331c      	adds	r3, #28
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe f9b0 	bl	8004b54 <st_dword>
					fs->wflag = 1;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	2201      	movs	r2, #1
 80067f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80067fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d037      	beq.n	8006870 <f_open+0x1d0>
						dw = fs->winsect;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006804:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006806:	f107 0314 	add.w	r3, r7, #20
 800680a:	2200      	movs	r2, #0
 800680c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fea4 	bl	800555c <remove_chain>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800681a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800681e:	2b00      	cmp	r3, #0
 8006820:	d126      	bne.n	8006870 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe fbee 	bl	8005008 <move_window>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006836:	3a01      	subs	r2, #1
 8006838:	611a      	str	r2, [r3, #16]
 800683a:	e019      	b.n	8006870 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800683c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006840:	2b00      	cmp	r3, #0
 8006842:	d115      	bne.n	8006870 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006844:	7ebb      	ldrb	r3, [r7, #26]
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <f_open+0x1b6>
					res = FR_NO_FILE;
 800684e:	2304      	movs	r3, #4
 8006850:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006854:	e00c      	b.n	8006870 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <f_open+0x1d0>
 8006860:	7ebb      	ldrb	r3, [r7, #26]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <f_open+0x1d0>
						res = FR_DENIED;
 800686a:	2307      	movs	r3, #7
 800686c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006870:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006874:	2b00      	cmp	r3, #0
 8006876:	d126      	bne.n	80068c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006888:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006892:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	2b01      	cmp	r3, #1
 800689c:	bf8c      	ite	hi
 800689e:	2301      	movhi	r3, #1
 80068a0:	2300      	movls	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	f107 0314 	add.w	r3, r7, #20
 80068aa:	4611      	mov	r1, r2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe fa79 	bl	8004da4 <inc_lock>
 80068b2:	4602      	mov	r2, r0
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <f_open+0x226>
 80068c0:	2302      	movs	r3, #2
 80068c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80068c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 80a3 	bne.w	8006a16 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff f91b 	bl	8005b12 <ld_clust>
 80068dc:	4602      	mov	r2, r0
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80068e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e4:	331c      	adds	r3, #28
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe f8f6 	bl	8004ad8 <ld_dword>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	88da      	ldrh	r2, [r3, #6]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	79fa      	ldrb	r2, [r7, #7]
 800690a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3330      	adds	r3, #48	@ 0x30
 8006922:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f7fe f960 	bl	8004bee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d06e      	beq.n	8006a16 <f_open+0x376>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d06a      	beq.n	8006a16 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	895b      	ldrh	r3, [r3, #10]
 800694c:	461a      	mov	r2, r3
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	899b      	ldrh	r3, [r3, #12]
 8006952:	fb02 f303 	mul.w	r3, r2, r3
 8006956:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	657b      	str	r3, [r7, #84]	@ 0x54
 8006964:	e016      	b.n	8006994 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fc09 	bl	8005182 <get_fat>
 8006970:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006974:	2b01      	cmp	r3, #1
 8006976:	d802      	bhi.n	800697e <f_open+0x2de>
 8006978:	2302      	movs	r3, #2
 800697a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800697e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d102      	bne.n	800698c <f_open+0x2ec>
 8006986:	2301      	movs	r3, #1
 8006988:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800698c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800698e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	657b      	str	r3, [r7, #84]	@ 0x54
 8006994:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <f_open+0x304>
 800699c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800699e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d8e0      	bhi.n	8006966 <f_open+0x2c6>
				}
				fp->clust = clst;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80069aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d131      	bne.n	8006a16 <f_open+0x376>
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	899b      	ldrh	r3, [r3, #12]
 80069b6:	461a      	mov	r2, r3
 80069b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80069be:	fb01 f202 	mul.w	r2, r1, r2
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d026      	beq.n	8006a16 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fbb9 	bl	8005144 <clust2sect>
 80069d2:	6478      	str	r0, [r7, #68]	@ 0x44
 80069d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d103      	bne.n	80069e2 <f_open+0x342>
						res = FR_INT_ERR;
 80069da:	2302      	movs	r3, #2
 80069dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80069e0:	e019      	b.n	8006a16 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	899b      	ldrh	r3, [r3, #12]
 80069e6:	461a      	mov	r2, r3
 80069e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80069ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f0:	441a      	add	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	7858      	ldrb	r0, [r3, #1]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1a      	ldr	r2, [r3, #32]
 8006a04:	2301      	movs	r3, #1
 8006a06:	f7fd fff1 	bl	80049ec <disk_read>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <f_open+0x376>
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006a16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <f_open+0x384>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006a24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3760      	adds	r7, #96	@ 0x60
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08c      	sub	sp, #48	@ 0x30
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f107 0210 	add.w	r2, r7, #16
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fda9 	bl	80065a8 <validate>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d107      	bne.n	8006a74 <f_write+0x44>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	7d5b      	ldrb	r3, [r3, #21]
 8006a68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <f_write+0x4a>
 8006a74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006a78:	e16a      	b.n	8006d50 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	7d1b      	ldrb	r3, [r3, #20]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <f_write+0x5a>
 8006a86:	2307      	movs	r3, #7
 8006a88:	e162      	b.n	8006d50 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	441a      	add	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	f080 814c 	bcs.w	8006d34 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006aa4:	e146      	b.n	8006d34 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	8992      	ldrh	r2, [r2, #12]
 8006aae:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ab2:	fb01 f202 	mul.w	r2, r1, r2
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f040 80f1 	bne.w	8006ca0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	8992      	ldrh	r2, [r2, #12]
 8006ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	8952      	ldrh	r2, [r2, #10]
 8006ace:	3a01      	subs	r2, #1
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d143      	bne.n	8006b62 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10c      	bne.n	8006afc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d11a      	bne.n	8006b24 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fd97 	bl	8005626 <create_chain>
 8006af8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006afa:	e013      	b.n	8006b24 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7fe fe23 	bl	8005756 <clmt_clust>
 8006b10:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006b12:	e007      	b.n	8006b24 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f7fe fd82 	bl	8005626 <create_chain>
 8006b22:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8109 	beq.w	8006d3e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d104      	bne.n	8006b3c <f_write+0x10c>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2202      	movs	r2, #2
 8006b36:	755a      	strb	r2, [r3, #21]
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e109      	b.n	8006d50 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d104      	bne.n	8006b4e <f_write+0x11e>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2201      	movs	r2, #1
 8006b48:	755a      	strb	r2, [r3, #21]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e100      	b.n	8006d50 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b52:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <f_write+0x132>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b60:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	7d1b      	ldrb	r3, [r3, #20]
 8006b66:	b25b      	sxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da18      	bge.n	8006b9e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	7858      	ldrb	r0, [r3, #1]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1a      	ldr	r2, [r3, #32]
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f7fd ff56 	bl	8004a2c <disk_write>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <f_write+0x160>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	755a      	strb	r2, [r3, #21]
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0df      	b.n	8006d50 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	7d1b      	ldrb	r3, [r3, #20]
 8006b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	f7fe facc 	bl	8005144 <clust2sect>
 8006bac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <f_write+0x18e>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	755a      	strb	r2, [r3, #21]
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e0c8      	b.n	8006d50 <f_write+0x320>
			sect += csect;
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	899b      	ldrh	r3, [r3, #12]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d043      	beq.n	8006c62 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	4413      	add	r3, r2
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	8952      	ldrh	r2, [r2, #10]
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d905      	bls.n	8006bf4 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	895b      	ldrh	r3, [r3, #10]
 8006bec:	461a      	mov	r2, r3
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	7858      	ldrb	r0, [r3, #1]
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	69f9      	ldr	r1, [r7, #28]
 8006bfe:	f7fd ff15 	bl	8004a2c <disk_write>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <f_write+0x1e2>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	755a      	strb	r2, [r3, #21]
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e09e      	b.n	8006d50 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	6a3a      	ldr	r2, [r7, #32]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d918      	bls.n	8006c52 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	8992      	ldrh	r2, [r2, #12]
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	18d1      	adds	r1, r2, r3
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	899b      	ldrh	r3, [r3, #12]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f7fd ffb4 	bl	8004bac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	7d1b      	ldrb	r3, [r3, #20]
 8006c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	899b      	ldrh	r3, [r3, #12]
 8006c56:	461a      	mov	r2, r3
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006c60:	e04b      	b.n	8006cfa <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d016      	beq.n	8006c9a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d210      	bcs.n	8006c9a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	7858      	ldrb	r0, [r3, #1]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006c82:	2301      	movs	r3, #1
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	f7fd feb1 	bl	80049ec <disk_read>
 8006c8a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2201      	movs	r2, #1
 8006c94:	755a      	strb	r2, [r3, #21]
 8006c96:	2301      	movs	r3, #1
 8006c98:	e05a      	b.n	8006d50 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	899b      	ldrh	r3, [r3, #12]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	8992      	ldrh	r2, [r2, #12]
 8006cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cb2:	fb01 f202 	mul.w	r2, r1, r2
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	1ac3      	subs	r3, r0, r3
 8006cba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d901      	bls.n	8006cc8 <f_write+0x298>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	8992      	ldrh	r2, [r2, #12]
 8006cd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cda:	fb00 f202 	mul.w	r2, r0, r2
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce4:	69f9      	ldr	r1, [r7, #28]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fd ff60 	bl	8004bac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	7d1b      	ldrb	r3, [r3, #20]
 8006cf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	4413      	add	r3, r2
 8006d00:	61fb      	str	r3, [r7, #28]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	441a      	add	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	619a      	str	r2, [r3, #24]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	bf38      	it	cc
 8006d1a:	461a      	movcc	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	60da      	str	r2, [r3, #12]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	441a      	add	r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f47f aeb5 	bne.w	8006aa6 <f_write+0x76>
 8006d3c:	e000      	b.n	8006d40 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d3e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	7d1b      	ldrb	r3, [r3, #20]
 8006d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3730      	adds	r7, #48	@ 0x30
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f107 0208 	add.w	r2, r7, #8
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff fc1d 	bl	80065a8 <validate>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d168      	bne.n	8006e4a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7d1b      	ldrb	r3, [r3, #20]
 8006d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d062      	beq.n	8006e4a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	7d1b      	ldrb	r3, [r3, #20]
 8006d88:	b25b      	sxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	da15      	bge.n	8006dba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	7858      	ldrb	r0, [r3, #1]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1a      	ldr	r2, [r3, #32]
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f7fd fe45 	bl	8004a2c <disk_write>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <f_sync+0x54>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e04f      	b.n	8006e4c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	7d1b      	ldrb	r3, [r3, #20]
 8006db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006dba:	f7fd fc69 	bl	8004690 <get_fattime>
 8006dbe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f7fe f91d 	bl	8005008 <move_window>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006dd2:	7dfb      	ldrb	r3, [r7, #23]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d138      	bne.n	8006e4a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ddc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	330b      	adds	r3, #11
 8006de2:	781a      	ldrb	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	330b      	adds	r3, #11
 8006de8:	f042 0220 	orr.w	r2, r2, #32
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	68f9      	ldr	r1, [r7, #12]
 8006dfc:	f7fe fea8 	bl	8005b50 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f103 021c 	add.w	r2, r3, #28
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f7fd fea1 	bl	8004b54 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3316      	adds	r3, #22
 8006e16:	6939      	ldr	r1, [r7, #16]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fd fe9b 	bl	8004b54 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3312      	adds	r3, #18
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fd fe7a 	bl	8004b1e <st_word>
					fs->wflag = 1;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe f916 	bl	8005064 <sync_fs>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	7d1b      	ldrb	r3, [r3, #20]
 8006e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ff7b 	bl	8006d58 <f_sync>
 8006e62:	4603      	mov	r3, r0
 8006e64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d118      	bne.n	8006e9e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f107 0208 	add.w	r2, r7, #8
 8006e72:	4611      	mov	r1, r2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fb97 	bl	80065a8 <validate>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10c      	bne.n	8006e9e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe f819 	bl	8004ec0 <dec_lock>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b090      	sub	sp, #64	@ 0x40
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8006eb2:	f107 010c 	add.w	r1, r7, #12
 8006eb6:	1d3b      	adds	r3, r7, #4
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff f8f4 	bl	80060a8 <find_volume>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8006ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11f      	bne.n	8006f0e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	f107 030c 	add.w	r3, r7, #12
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe ffd6 	bl	8005e88 <follow_path>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8006ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d111      	bne.n	8006f0e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8006eea:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006eee:	b25b      	sxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	da03      	bge.n	8006efc <f_stat+0x54>
				res = FR_INVALID_NAME;
 8006ef4:	2306      	movs	r3, #6
 8006ef6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006efa:	e008      	b.n	8006f0e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d005      	beq.n	8006f0e <f_stat+0x66>
 8006f02:	f107 030c 	add.w	r3, r7, #12
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fec8 	bl	8005c9e <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8006f0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3740      	adds	r7, #64	@ 0x40
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006f32:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb0 <FATFS_LinkDriverEx+0x94>)
 8006f34:	7a5b      	ldrb	r3, [r3, #9]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d131      	bne.n	8006fa0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb0 <FATFS_LinkDriverEx+0x94>)
 8006f3e:	7a5b      	ldrb	r3, [r3, #9]
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb0 <FATFS_LinkDriverEx+0x94>)
 8006f46:	2100      	movs	r1, #0
 8006f48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006f4a:	4b19      	ldr	r3, [pc, #100]	@ (8006fb0 <FATFS_LinkDriverEx+0x94>)
 8006f4c:	7a5b      	ldrb	r3, [r3, #9]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	4a17      	ldr	r2, [pc, #92]	@ (8006fb0 <FATFS_LinkDriverEx+0x94>)
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006f5a:	4b15      	ldr	r3, [pc, #84]	@ (8006fb0 <FATFS_LinkDriverEx+0x94>)
 8006f5c:	7a5b      	ldrb	r3, [r3, #9]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	4b13      	ldr	r3, [pc, #76]	@ (8006fb0 <FATFS_LinkDriverEx+0x94>)
 8006f64:	4413      	add	r3, r2
 8006f66:	79fa      	ldrb	r2, [r7, #7]
 8006f68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f6a:	4b11      	ldr	r3, [pc, #68]	@ (8006fb0 <FATFS_LinkDriverEx+0x94>)
 8006f6c:	7a5b      	ldrb	r3, [r3, #9]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	b2d1      	uxtb	r1, r2
 8006f74:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb0 <FATFS_LinkDriverEx+0x94>)
 8006f76:	7251      	strb	r1, [r2, #9]
 8006f78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f7a:	7dbb      	ldrb	r3, [r7, #22]
 8006f7c:	3330      	adds	r3, #48	@ 0x30
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	3301      	adds	r3, #1
 8006f88:	223a      	movs	r2, #58	@ 0x3a
 8006f8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	3302      	adds	r3, #2
 8006f90:	222f      	movs	r2, #47	@ 0x2f
 8006f92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	3303      	adds	r3, #3
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20002228 	.word	0x20002228

08006fb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff ffaa 	bl	8006f1c <FATFS_LinkDriverEx>
 8006fc8:	4603      	mov	r3, r0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <malloc>:
 8006fd4:	4b02      	ldr	r3, [pc, #8]	@ (8006fe0 <malloc+0xc>)
 8006fd6:	4601      	mov	r1, r0
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	f000 b82d 	b.w	8007038 <_malloc_r>
 8006fde:	bf00      	nop
 8006fe0:	2000000c 	.word	0x2000000c

08006fe4 <free>:
 8006fe4:	4b02      	ldr	r3, [pc, #8]	@ (8006ff0 <free+0xc>)
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	f000 b915 	b.w	8007218 <_free_r>
 8006fee:	bf00      	nop
 8006ff0:	2000000c 	.word	0x2000000c

08006ff4 <sbrk_aligned>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8007034 <sbrk_aligned+0x40>)
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	6831      	ldr	r1, [r6, #0]
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	b911      	cbnz	r1, 8007006 <sbrk_aligned+0x12>
 8007000:	f000 f8ce 	bl	80071a0 <_sbrk_r>
 8007004:	6030      	str	r0, [r6, #0]
 8007006:	4621      	mov	r1, r4
 8007008:	4628      	mov	r0, r5
 800700a:	f000 f8c9 	bl	80071a0 <_sbrk_r>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d103      	bne.n	800701a <sbrk_aligned+0x26>
 8007012:	f04f 34ff 	mov.w	r4, #4294967295
 8007016:	4620      	mov	r0, r4
 8007018:	bd70      	pop	{r4, r5, r6, pc}
 800701a:	1cc4      	adds	r4, r0, #3
 800701c:	f024 0403 	bic.w	r4, r4, #3
 8007020:	42a0      	cmp	r0, r4
 8007022:	d0f8      	beq.n	8007016 <sbrk_aligned+0x22>
 8007024:	1a21      	subs	r1, r4, r0
 8007026:	4628      	mov	r0, r5
 8007028:	f000 f8ba 	bl	80071a0 <_sbrk_r>
 800702c:	3001      	adds	r0, #1
 800702e:	d1f2      	bne.n	8007016 <sbrk_aligned+0x22>
 8007030:	e7ef      	b.n	8007012 <sbrk_aligned+0x1e>
 8007032:	bf00      	nop
 8007034:	20002234 	.word	0x20002234

08007038 <_malloc_r>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	1ccd      	adds	r5, r1, #3
 800703e:	f025 0503 	bic.w	r5, r5, #3
 8007042:	3508      	adds	r5, #8
 8007044:	2d0c      	cmp	r5, #12
 8007046:	bf38      	it	cc
 8007048:	250c      	movcc	r5, #12
 800704a:	2d00      	cmp	r5, #0
 800704c:	4606      	mov	r6, r0
 800704e:	db01      	blt.n	8007054 <_malloc_r+0x1c>
 8007050:	42a9      	cmp	r1, r5
 8007052:	d904      	bls.n	800705e <_malloc_r+0x26>
 8007054:	230c      	movs	r3, #12
 8007056:	6033      	str	r3, [r6, #0]
 8007058:	2000      	movs	r0, #0
 800705a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007134 <_malloc_r+0xfc>
 8007062:	f000 f869 	bl	8007138 <__malloc_lock>
 8007066:	f8d8 3000 	ldr.w	r3, [r8]
 800706a:	461c      	mov	r4, r3
 800706c:	bb44      	cbnz	r4, 80070c0 <_malloc_r+0x88>
 800706e:	4629      	mov	r1, r5
 8007070:	4630      	mov	r0, r6
 8007072:	f7ff ffbf 	bl	8006ff4 <sbrk_aligned>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	4604      	mov	r4, r0
 800707a:	d158      	bne.n	800712e <_malloc_r+0xf6>
 800707c:	f8d8 4000 	ldr.w	r4, [r8]
 8007080:	4627      	mov	r7, r4
 8007082:	2f00      	cmp	r7, #0
 8007084:	d143      	bne.n	800710e <_malloc_r+0xd6>
 8007086:	2c00      	cmp	r4, #0
 8007088:	d04b      	beq.n	8007122 <_malloc_r+0xea>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	4639      	mov	r1, r7
 800708e:	4630      	mov	r0, r6
 8007090:	eb04 0903 	add.w	r9, r4, r3
 8007094:	f000 f884 	bl	80071a0 <_sbrk_r>
 8007098:	4581      	cmp	r9, r0
 800709a:	d142      	bne.n	8007122 <_malloc_r+0xea>
 800709c:	6821      	ldr	r1, [r4, #0]
 800709e:	1a6d      	subs	r5, r5, r1
 80070a0:	4629      	mov	r1, r5
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff ffa6 	bl	8006ff4 <sbrk_aligned>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d03a      	beq.n	8007122 <_malloc_r+0xea>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	442b      	add	r3, r5
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	f8d8 3000 	ldr.w	r3, [r8]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	bb62      	cbnz	r2, 8007114 <_malloc_r+0xdc>
 80070ba:	f8c8 7000 	str.w	r7, [r8]
 80070be:	e00f      	b.n	80070e0 <_malloc_r+0xa8>
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	1b52      	subs	r2, r2, r5
 80070c4:	d420      	bmi.n	8007108 <_malloc_r+0xd0>
 80070c6:	2a0b      	cmp	r2, #11
 80070c8:	d917      	bls.n	80070fa <_malloc_r+0xc2>
 80070ca:	1961      	adds	r1, r4, r5
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	6025      	str	r5, [r4, #0]
 80070d0:	bf18      	it	ne
 80070d2:	6059      	strne	r1, [r3, #4]
 80070d4:	6863      	ldr	r3, [r4, #4]
 80070d6:	bf08      	it	eq
 80070d8:	f8c8 1000 	streq.w	r1, [r8]
 80070dc:	5162      	str	r2, [r4, r5]
 80070de:	604b      	str	r3, [r1, #4]
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f82f 	bl	8007144 <__malloc_unlock>
 80070e6:	f104 000b 	add.w	r0, r4, #11
 80070ea:	1d23      	adds	r3, r4, #4
 80070ec:	f020 0007 	bic.w	r0, r0, #7
 80070f0:	1ac2      	subs	r2, r0, r3
 80070f2:	bf1c      	itt	ne
 80070f4:	1a1b      	subne	r3, r3, r0
 80070f6:	50a3      	strne	r3, [r4, r2]
 80070f8:	e7af      	b.n	800705a <_malloc_r+0x22>
 80070fa:	6862      	ldr	r2, [r4, #4]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	bf0c      	ite	eq
 8007100:	f8c8 2000 	streq.w	r2, [r8]
 8007104:	605a      	strne	r2, [r3, #4]
 8007106:	e7eb      	b.n	80070e0 <_malloc_r+0xa8>
 8007108:	4623      	mov	r3, r4
 800710a:	6864      	ldr	r4, [r4, #4]
 800710c:	e7ae      	b.n	800706c <_malloc_r+0x34>
 800710e:	463c      	mov	r4, r7
 8007110:	687f      	ldr	r7, [r7, #4]
 8007112:	e7b6      	b.n	8007082 <_malloc_r+0x4a>
 8007114:	461a      	mov	r2, r3
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	42a3      	cmp	r3, r4
 800711a:	d1fb      	bne.n	8007114 <_malloc_r+0xdc>
 800711c:	2300      	movs	r3, #0
 800711e:	6053      	str	r3, [r2, #4]
 8007120:	e7de      	b.n	80070e0 <_malloc_r+0xa8>
 8007122:	230c      	movs	r3, #12
 8007124:	6033      	str	r3, [r6, #0]
 8007126:	4630      	mov	r0, r6
 8007128:	f000 f80c 	bl	8007144 <__malloc_unlock>
 800712c:	e794      	b.n	8007058 <_malloc_r+0x20>
 800712e:	6005      	str	r5, [r0, #0]
 8007130:	e7d6      	b.n	80070e0 <_malloc_r+0xa8>
 8007132:	bf00      	nop
 8007134:	20002238 	.word	0x20002238

08007138 <__malloc_lock>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__malloc_lock+0x8>)
 800713a:	f000 b86b 	b.w	8007214 <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	20002378 	.word	0x20002378

08007144 <__malloc_unlock>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__malloc_unlock+0x8>)
 8007146:	f000 b866 	b.w	8007216 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	20002378 	.word	0x20002378

08007150 <siprintf>:
 8007150:	b40e      	push	{r1, r2, r3}
 8007152:	b500      	push	{lr}
 8007154:	b09c      	sub	sp, #112	@ 0x70
 8007156:	ab1d      	add	r3, sp, #116	@ 0x74
 8007158:	9002      	str	r0, [sp, #8]
 800715a:	9006      	str	r0, [sp, #24]
 800715c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007160:	4809      	ldr	r0, [pc, #36]	@ (8007188 <siprintf+0x38>)
 8007162:	9107      	str	r1, [sp, #28]
 8007164:	9104      	str	r1, [sp, #16]
 8007166:	4909      	ldr	r1, [pc, #36]	@ (800718c <siprintf+0x3c>)
 8007168:	f853 2b04 	ldr.w	r2, [r3], #4
 800716c:	9105      	str	r1, [sp, #20]
 800716e:	6800      	ldr	r0, [r0, #0]
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	a902      	add	r1, sp, #8
 8007174:	f000 f8f6 	bl	8007364 <_svfiprintf_r>
 8007178:	9b02      	ldr	r3, [sp, #8]
 800717a:	2200      	movs	r2, #0
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	b01c      	add	sp, #112	@ 0x70
 8007180:	f85d eb04 	ldr.w	lr, [sp], #4
 8007184:	b003      	add	sp, #12
 8007186:	4770      	bx	lr
 8007188:	2000000c 	.word	0x2000000c
 800718c:	ffff0208 	.word	0xffff0208

08007190 <memset>:
 8007190:	4402      	add	r2, r0
 8007192:	4603      	mov	r3, r0
 8007194:	4293      	cmp	r3, r2
 8007196:	d100      	bne.n	800719a <memset+0xa>
 8007198:	4770      	bx	lr
 800719a:	f803 1b01 	strb.w	r1, [r3], #1
 800719e:	e7f9      	b.n	8007194 <memset+0x4>

080071a0 <_sbrk_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d06      	ldr	r5, [pc, #24]	@ (80071bc <_sbrk_r+0x1c>)
 80071a4:	2300      	movs	r3, #0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	602b      	str	r3, [r5, #0]
 80071ac:	f7f9 fe1e 	bl	8000dec <_sbrk>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_sbrk_r+0x1a>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_sbrk_r+0x1a>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	20002374 	.word	0x20002374

080071c0 <__errno>:
 80071c0:	4b01      	ldr	r3, [pc, #4]	@ (80071c8 <__errno+0x8>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	2000000c 	.word	0x2000000c

080071cc <__libc_init_array>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	4d0d      	ldr	r5, [pc, #52]	@ (8007204 <__libc_init_array+0x38>)
 80071d0:	4c0d      	ldr	r4, [pc, #52]	@ (8007208 <__libc_init_array+0x3c>)
 80071d2:	1b64      	subs	r4, r4, r5
 80071d4:	10a4      	asrs	r4, r4, #2
 80071d6:	2600      	movs	r6, #0
 80071d8:	42a6      	cmp	r6, r4
 80071da:	d109      	bne.n	80071f0 <__libc_init_array+0x24>
 80071dc:	4d0b      	ldr	r5, [pc, #44]	@ (800720c <__libc_init_array+0x40>)
 80071de:	4c0c      	ldr	r4, [pc, #48]	@ (8007210 <__libc_init_array+0x44>)
 80071e0:	f000 fba8 	bl	8007934 <_init>
 80071e4:	1b64      	subs	r4, r4, r5
 80071e6:	10a4      	asrs	r4, r4, #2
 80071e8:	2600      	movs	r6, #0
 80071ea:	42a6      	cmp	r6, r4
 80071ec:	d105      	bne.n	80071fa <__libc_init_array+0x2e>
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
 80071f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f4:	4798      	blx	r3
 80071f6:	3601      	adds	r6, #1
 80071f8:	e7ee      	b.n	80071d8 <__libc_init_array+0xc>
 80071fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071fe:	4798      	blx	r3
 8007200:	3601      	adds	r6, #1
 8007202:	e7f2      	b.n	80071ea <__libc_init_array+0x1e>
 8007204:	08007e2c 	.word	0x08007e2c
 8007208:	08007e2c 	.word	0x08007e2c
 800720c:	08007e2c 	.word	0x08007e2c
 8007210:	08007e30 	.word	0x08007e30

08007214 <__retarget_lock_acquire_recursive>:
 8007214:	4770      	bx	lr

08007216 <__retarget_lock_release_recursive>:
 8007216:	4770      	bx	lr

08007218 <_free_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4605      	mov	r5, r0
 800721c:	2900      	cmp	r1, #0
 800721e:	d041      	beq.n	80072a4 <_free_r+0x8c>
 8007220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007224:	1f0c      	subs	r4, r1, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	bfb8      	it	lt
 800722a:	18e4      	addlt	r4, r4, r3
 800722c:	f7ff ff84 	bl	8007138 <__malloc_lock>
 8007230:	4a1d      	ldr	r2, [pc, #116]	@ (80072a8 <_free_r+0x90>)
 8007232:	6813      	ldr	r3, [r2, #0]
 8007234:	b933      	cbnz	r3, 8007244 <_free_r+0x2c>
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	6014      	str	r4, [r2, #0]
 800723a:	4628      	mov	r0, r5
 800723c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007240:	f7ff bf80 	b.w	8007144 <__malloc_unlock>
 8007244:	42a3      	cmp	r3, r4
 8007246:	d908      	bls.n	800725a <_free_r+0x42>
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	1821      	adds	r1, r4, r0
 800724c:	428b      	cmp	r3, r1
 800724e:	bf01      	itttt	eq
 8007250:	6819      	ldreq	r1, [r3, #0]
 8007252:	685b      	ldreq	r3, [r3, #4]
 8007254:	1809      	addeq	r1, r1, r0
 8007256:	6021      	streq	r1, [r4, #0]
 8007258:	e7ed      	b.n	8007236 <_free_r+0x1e>
 800725a:	461a      	mov	r2, r3
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	b10b      	cbz	r3, 8007264 <_free_r+0x4c>
 8007260:	42a3      	cmp	r3, r4
 8007262:	d9fa      	bls.n	800725a <_free_r+0x42>
 8007264:	6811      	ldr	r1, [r2, #0]
 8007266:	1850      	adds	r0, r2, r1
 8007268:	42a0      	cmp	r0, r4
 800726a:	d10b      	bne.n	8007284 <_free_r+0x6c>
 800726c:	6820      	ldr	r0, [r4, #0]
 800726e:	4401      	add	r1, r0
 8007270:	1850      	adds	r0, r2, r1
 8007272:	4283      	cmp	r3, r0
 8007274:	6011      	str	r1, [r2, #0]
 8007276:	d1e0      	bne.n	800723a <_free_r+0x22>
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	6053      	str	r3, [r2, #4]
 800727e:	4408      	add	r0, r1
 8007280:	6010      	str	r0, [r2, #0]
 8007282:	e7da      	b.n	800723a <_free_r+0x22>
 8007284:	d902      	bls.n	800728c <_free_r+0x74>
 8007286:	230c      	movs	r3, #12
 8007288:	602b      	str	r3, [r5, #0]
 800728a:	e7d6      	b.n	800723a <_free_r+0x22>
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	1821      	adds	r1, r4, r0
 8007290:	428b      	cmp	r3, r1
 8007292:	bf04      	itt	eq
 8007294:	6819      	ldreq	r1, [r3, #0]
 8007296:	685b      	ldreq	r3, [r3, #4]
 8007298:	6063      	str	r3, [r4, #4]
 800729a:	bf04      	itt	eq
 800729c:	1809      	addeq	r1, r1, r0
 800729e:	6021      	streq	r1, [r4, #0]
 80072a0:	6054      	str	r4, [r2, #4]
 80072a2:	e7ca      	b.n	800723a <_free_r+0x22>
 80072a4:	bd38      	pop	{r3, r4, r5, pc}
 80072a6:	bf00      	nop
 80072a8:	20002238 	.word	0x20002238

080072ac <__ssputs_r>:
 80072ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b0:	688e      	ldr	r6, [r1, #8]
 80072b2:	461f      	mov	r7, r3
 80072b4:	42be      	cmp	r6, r7
 80072b6:	680b      	ldr	r3, [r1, #0]
 80072b8:	4682      	mov	sl, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	4690      	mov	r8, r2
 80072be:	d82d      	bhi.n	800731c <__ssputs_r+0x70>
 80072c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072c8:	d026      	beq.n	8007318 <__ssputs_r+0x6c>
 80072ca:	6965      	ldr	r5, [r4, #20]
 80072cc:	6909      	ldr	r1, [r1, #16]
 80072ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072d2:	eba3 0901 	sub.w	r9, r3, r1
 80072d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072da:	1c7b      	adds	r3, r7, #1
 80072dc:	444b      	add	r3, r9
 80072de:	106d      	asrs	r5, r5, #1
 80072e0:	429d      	cmp	r5, r3
 80072e2:	bf38      	it	cc
 80072e4:	461d      	movcc	r5, r3
 80072e6:	0553      	lsls	r3, r2, #21
 80072e8:	d527      	bpl.n	800733a <__ssputs_r+0x8e>
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7ff fea4 	bl	8007038 <_malloc_r>
 80072f0:	4606      	mov	r6, r0
 80072f2:	b360      	cbz	r0, 800734e <__ssputs_r+0xa2>
 80072f4:	6921      	ldr	r1, [r4, #16]
 80072f6:	464a      	mov	r2, r9
 80072f8:	f000 fad8 	bl	80078ac <memcpy>
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007306:	81a3      	strh	r3, [r4, #12]
 8007308:	6126      	str	r6, [r4, #16]
 800730a:	6165      	str	r5, [r4, #20]
 800730c:	444e      	add	r6, r9
 800730e:	eba5 0509 	sub.w	r5, r5, r9
 8007312:	6026      	str	r6, [r4, #0]
 8007314:	60a5      	str	r5, [r4, #8]
 8007316:	463e      	mov	r6, r7
 8007318:	42be      	cmp	r6, r7
 800731a:	d900      	bls.n	800731e <__ssputs_r+0x72>
 800731c:	463e      	mov	r6, r7
 800731e:	6820      	ldr	r0, [r4, #0]
 8007320:	4632      	mov	r2, r6
 8007322:	4641      	mov	r1, r8
 8007324:	f000 faa8 	bl	8007878 <memmove>
 8007328:	68a3      	ldr	r3, [r4, #8]
 800732a:	1b9b      	subs	r3, r3, r6
 800732c:	60a3      	str	r3, [r4, #8]
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	4433      	add	r3, r6
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	2000      	movs	r0, #0
 8007336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733a:	462a      	mov	r2, r5
 800733c:	f000 fac4 	bl	80078c8 <_realloc_r>
 8007340:	4606      	mov	r6, r0
 8007342:	2800      	cmp	r0, #0
 8007344:	d1e0      	bne.n	8007308 <__ssputs_r+0x5c>
 8007346:	6921      	ldr	r1, [r4, #16]
 8007348:	4650      	mov	r0, sl
 800734a:	f7ff ff65 	bl	8007218 <_free_r>
 800734e:	230c      	movs	r3, #12
 8007350:	f8ca 3000 	str.w	r3, [sl]
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800735a:	81a3      	strh	r3, [r4, #12]
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	e7e9      	b.n	8007336 <__ssputs_r+0x8a>
	...

08007364 <_svfiprintf_r>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	4698      	mov	r8, r3
 800736a:	898b      	ldrh	r3, [r1, #12]
 800736c:	061b      	lsls	r3, r3, #24
 800736e:	b09d      	sub	sp, #116	@ 0x74
 8007370:	4607      	mov	r7, r0
 8007372:	460d      	mov	r5, r1
 8007374:	4614      	mov	r4, r2
 8007376:	d510      	bpl.n	800739a <_svfiprintf_r+0x36>
 8007378:	690b      	ldr	r3, [r1, #16]
 800737a:	b973      	cbnz	r3, 800739a <_svfiprintf_r+0x36>
 800737c:	2140      	movs	r1, #64	@ 0x40
 800737e:	f7ff fe5b 	bl	8007038 <_malloc_r>
 8007382:	6028      	str	r0, [r5, #0]
 8007384:	6128      	str	r0, [r5, #16]
 8007386:	b930      	cbnz	r0, 8007396 <_svfiprintf_r+0x32>
 8007388:	230c      	movs	r3, #12
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	b01d      	add	sp, #116	@ 0x74
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	2340      	movs	r3, #64	@ 0x40
 8007398:	616b      	str	r3, [r5, #20]
 800739a:	2300      	movs	r3, #0
 800739c:	9309      	str	r3, [sp, #36]	@ 0x24
 800739e:	2320      	movs	r3, #32
 80073a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a8:	2330      	movs	r3, #48	@ 0x30
 80073aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007548 <_svfiprintf_r+0x1e4>
 80073ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073b2:	f04f 0901 	mov.w	r9, #1
 80073b6:	4623      	mov	r3, r4
 80073b8:	469a      	mov	sl, r3
 80073ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073be:	b10a      	cbz	r2, 80073c4 <_svfiprintf_r+0x60>
 80073c0:	2a25      	cmp	r2, #37	@ 0x25
 80073c2:	d1f9      	bne.n	80073b8 <_svfiprintf_r+0x54>
 80073c4:	ebba 0b04 	subs.w	fp, sl, r4
 80073c8:	d00b      	beq.n	80073e2 <_svfiprintf_r+0x7e>
 80073ca:	465b      	mov	r3, fp
 80073cc:	4622      	mov	r2, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff ff6b 	bl	80072ac <__ssputs_r>
 80073d6:	3001      	adds	r0, #1
 80073d8:	f000 80a7 	beq.w	800752a <_svfiprintf_r+0x1c6>
 80073dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073de:	445a      	add	r2, fp
 80073e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073e2:	f89a 3000 	ldrb.w	r3, [sl]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 809f 	beq.w	800752a <_svfiprintf_r+0x1c6>
 80073ec:	2300      	movs	r3, #0
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295
 80073f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f6:	f10a 0a01 	add.w	sl, sl, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	9307      	str	r3, [sp, #28]
 80073fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007402:	931a      	str	r3, [sp, #104]	@ 0x68
 8007404:	4654      	mov	r4, sl
 8007406:	2205      	movs	r2, #5
 8007408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740c:	484e      	ldr	r0, [pc, #312]	@ (8007548 <_svfiprintf_r+0x1e4>)
 800740e:	f7f8 fee7 	bl	80001e0 <memchr>
 8007412:	9a04      	ldr	r2, [sp, #16]
 8007414:	b9d8      	cbnz	r0, 800744e <_svfiprintf_r+0xea>
 8007416:	06d0      	lsls	r0, r2, #27
 8007418:	bf44      	itt	mi
 800741a:	2320      	movmi	r3, #32
 800741c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007420:	0711      	lsls	r1, r2, #28
 8007422:	bf44      	itt	mi
 8007424:	232b      	movmi	r3, #43	@ 0x2b
 8007426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800742a:	f89a 3000 	ldrb.w	r3, [sl]
 800742e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007430:	d015      	beq.n	800745e <_svfiprintf_r+0xfa>
 8007432:	9a07      	ldr	r2, [sp, #28]
 8007434:	4654      	mov	r4, sl
 8007436:	2000      	movs	r0, #0
 8007438:	f04f 0c0a 	mov.w	ip, #10
 800743c:	4621      	mov	r1, r4
 800743e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007442:	3b30      	subs	r3, #48	@ 0x30
 8007444:	2b09      	cmp	r3, #9
 8007446:	d94b      	bls.n	80074e0 <_svfiprintf_r+0x17c>
 8007448:	b1b0      	cbz	r0, 8007478 <_svfiprintf_r+0x114>
 800744a:	9207      	str	r2, [sp, #28]
 800744c:	e014      	b.n	8007478 <_svfiprintf_r+0x114>
 800744e:	eba0 0308 	sub.w	r3, r0, r8
 8007452:	fa09 f303 	lsl.w	r3, r9, r3
 8007456:	4313      	orrs	r3, r2
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	46a2      	mov	sl, r4
 800745c:	e7d2      	b.n	8007404 <_svfiprintf_r+0xa0>
 800745e:	9b03      	ldr	r3, [sp, #12]
 8007460:	1d19      	adds	r1, r3, #4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	9103      	str	r1, [sp, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfbb      	ittet	lt
 800746a:	425b      	neglt	r3, r3
 800746c:	f042 0202 	orrlt.w	r2, r2, #2
 8007470:	9307      	strge	r3, [sp, #28]
 8007472:	9307      	strlt	r3, [sp, #28]
 8007474:	bfb8      	it	lt
 8007476:	9204      	strlt	r2, [sp, #16]
 8007478:	7823      	ldrb	r3, [r4, #0]
 800747a:	2b2e      	cmp	r3, #46	@ 0x2e
 800747c:	d10a      	bne.n	8007494 <_svfiprintf_r+0x130>
 800747e:	7863      	ldrb	r3, [r4, #1]
 8007480:	2b2a      	cmp	r3, #42	@ 0x2a
 8007482:	d132      	bne.n	80074ea <_svfiprintf_r+0x186>
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	9203      	str	r2, [sp, #12]
 800748c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007490:	3402      	adds	r4, #2
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007558 <_svfiprintf_r+0x1f4>
 8007498:	7821      	ldrb	r1, [r4, #0]
 800749a:	2203      	movs	r2, #3
 800749c:	4650      	mov	r0, sl
 800749e:	f7f8 fe9f 	bl	80001e0 <memchr>
 80074a2:	b138      	cbz	r0, 80074b4 <_svfiprintf_r+0x150>
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	eba0 000a 	sub.w	r0, r0, sl
 80074aa:	2240      	movs	r2, #64	@ 0x40
 80074ac:	4082      	lsls	r2, r0
 80074ae:	4313      	orrs	r3, r2
 80074b0:	3401      	adds	r4, #1
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b8:	4824      	ldr	r0, [pc, #144]	@ (800754c <_svfiprintf_r+0x1e8>)
 80074ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074be:	2206      	movs	r2, #6
 80074c0:	f7f8 fe8e 	bl	80001e0 <memchr>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d036      	beq.n	8007536 <_svfiprintf_r+0x1d2>
 80074c8:	4b21      	ldr	r3, [pc, #132]	@ (8007550 <_svfiprintf_r+0x1ec>)
 80074ca:	bb1b      	cbnz	r3, 8007514 <_svfiprintf_r+0x1b0>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	3307      	adds	r3, #7
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	3308      	adds	r3, #8
 80074d6:	9303      	str	r3, [sp, #12]
 80074d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074da:	4433      	add	r3, r6
 80074dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074de:	e76a      	b.n	80073b6 <_svfiprintf_r+0x52>
 80074e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e4:	460c      	mov	r4, r1
 80074e6:	2001      	movs	r0, #1
 80074e8:	e7a8      	b.n	800743c <_svfiprintf_r+0xd8>
 80074ea:	2300      	movs	r3, #0
 80074ec:	3401      	adds	r4, #1
 80074ee:	9305      	str	r3, [sp, #20]
 80074f0:	4619      	mov	r1, r3
 80074f2:	f04f 0c0a 	mov.w	ip, #10
 80074f6:	4620      	mov	r0, r4
 80074f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074fc:	3a30      	subs	r2, #48	@ 0x30
 80074fe:	2a09      	cmp	r2, #9
 8007500:	d903      	bls.n	800750a <_svfiprintf_r+0x1a6>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0c6      	beq.n	8007494 <_svfiprintf_r+0x130>
 8007506:	9105      	str	r1, [sp, #20]
 8007508:	e7c4      	b.n	8007494 <_svfiprintf_r+0x130>
 800750a:	fb0c 2101 	mla	r1, ip, r1, r2
 800750e:	4604      	mov	r4, r0
 8007510:	2301      	movs	r3, #1
 8007512:	e7f0      	b.n	80074f6 <_svfiprintf_r+0x192>
 8007514:	ab03      	add	r3, sp, #12
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	462a      	mov	r2, r5
 800751a:	4b0e      	ldr	r3, [pc, #56]	@ (8007554 <_svfiprintf_r+0x1f0>)
 800751c:	a904      	add	r1, sp, #16
 800751e:	4638      	mov	r0, r7
 8007520:	f3af 8000 	nop.w
 8007524:	1c42      	adds	r2, r0, #1
 8007526:	4606      	mov	r6, r0
 8007528:	d1d6      	bne.n	80074d8 <_svfiprintf_r+0x174>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	065b      	lsls	r3, r3, #25
 800752e:	f53f af2d 	bmi.w	800738c <_svfiprintf_r+0x28>
 8007532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007534:	e72c      	b.n	8007390 <_svfiprintf_r+0x2c>
 8007536:	ab03      	add	r3, sp, #12
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	462a      	mov	r2, r5
 800753c:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <_svfiprintf_r+0x1f0>)
 800753e:	a904      	add	r1, sp, #16
 8007540:	4638      	mov	r0, r7
 8007542:	f000 f879 	bl	8007638 <_printf_i>
 8007546:	e7ed      	b.n	8007524 <_svfiprintf_r+0x1c0>
 8007548:	08007df0 	.word	0x08007df0
 800754c:	08007dfa 	.word	0x08007dfa
 8007550:	00000000 	.word	0x00000000
 8007554:	080072ad 	.word	0x080072ad
 8007558:	08007df6 	.word	0x08007df6

0800755c <_printf_common>:
 800755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	4616      	mov	r6, r2
 8007562:	4698      	mov	r8, r3
 8007564:	688a      	ldr	r2, [r1, #8]
 8007566:	690b      	ldr	r3, [r1, #16]
 8007568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800756c:	4293      	cmp	r3, r2
 800756e:	bfb8      	it	lt
 8007570:	4613      	movlt	r3, r2
 8007572:	6033      	str	r3, [r6, #0]
 8007574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007578:	4607      	mov	r7, r0
 800757a:	460c      	mov	r4, r1
 800757c:	b10a      	cbz	r2, 8007582 <_printf_common+0x26>
 800757e:	3301      	adds	r3, #1
 8007580:	6033      	str	r3, [r6, #0]
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	0699      	lsls	r1, r3, #26
 8007586:	bf42      	ittt	mi
 8007588:	6833      	ldrmi	r3, [r6, #0]
 800758a:	3302      	addmi	r3, #2
 800758c:	6033      	strmi	r3, [r6, #0]
 800758e:	6825      	ldr	r5, [r4, #0]
 8007590:	f015 0506 	ands.w	r5, r5, #6
 8007594:	d106      	bne.n	80075a4 <_printf_common+0x48>
 8007596:	f104 0a19 	add.w	sl, r4, #25
 800759a:	68e3      	ldr	r3, [r4, #12]
 800759c:	6832      	ldr	r2, [r6, #0]
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	42ab      	cmp	r3, r5
 80075a2:	dc26      	bgt.n	80075f2 <_printf_common+0x96>
 80075a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075a8:	6822      	ldr	r2, [r4, #0]
 80075aa:	3b00      	subs	r3, #0
 80075ac:	bf18      	it	ne
 80075ae:	2301      	movne	r3, #1
 80075b0:	0692      	lsls	r2, r2, #26
 80075b2:	d42b      	bmi.n	800760c <_printf_common+0xb0>
 80075b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075b8:	4641      	mov	r1, r8
 80075ba:	4638      	mov	r0, r7
 80075bc:	47c8      	blx	r9
 80075be:	3001      	adds	r0, #1
 80075c0:	d01e      	beq.n	8007600 <_printf_common+0xa4>
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	6922      	ldr	r2, [r4, #16]
 80075c6:	f003 0306 	and.w	r3, r3, #6
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	bf02      	ittt	eq
 80075ce:	68e5      	ldreq	r5, [r4, #12]
 80075d0:	6833      	ldreq	r3, [r6, #0]
 80075d2:	1aed      	subeq	r5, r5, r3
 80075d4:	68a3      	ldr	r3, [r4, #8]
 80075d6:	bf0c      	ite	eq
 80075d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075dc:	2500      	movne	r5, #0
 80075de:	4293      	cmp	r3, r2
 80075e0:	bfc4      	itt	gt
 80075e2:	1a9b      	subgt	r3, r3, r2
 80075e4:	18ed      	addgt	r5, r5, r3
 80075e6:	2600      	movs	r6, #0
 80075e8:	341a      	adds	r4, #26
 80075ea:	42b5      	cmp	r5, r6
 80075ec:	d11a      	bne.n	8007624 <_printf_common+0xc8>
 80075ee:	2000      	movs	r0, #0
 80075f0:	e008      	b.n	8007604 <_printf_common+0xa8>
 80075f2:	2301      	movs	r3, #1
 80075f4:	4652      	mov	r2, sl
 80075f6:	4641      	mov	r1, r8
 80075f8:	4638      	mov	r0, r7
 80075fa:	47c8      	blx	r9
 80075fc:	3001      	adds	r0, #1
 80075fe:	d103      	bne.n	8007608 <_printf_common+0xac>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007608:	3501      	adds	r5, #1
 800760a:	e7c6      	b.n	800759a <_printf_common+0x3e>
 800760c:	18e1      	adds	r1, r4, r3
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	2030      	movs	r0, #48	@ 0x30
 8007612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007616:	4422      	add	r2, r4
 8007618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800761c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007620:	3302      	adds	r3, #2
 8007622:	e7c7      	b.n	80075b4 <_printf_common+0x58>
 8007624:	2301      	movs	r3, #1
 8007626:	4622      	mov	r2, r4
 8007628:	4641      	mov	r1, r8
 800762a:	4638      	mov	r0, r7
 800762c:	47c8      	blx	r9
 800762e:	3001      	adds	r0, #1
 8007630:	d0e6      	beq.n	8007600 <_printf_common+0xa4>
 8007632:	3601      	adds	r6, #1
 8007634:	e7d9      	b.n	80075ea <_printf_common+0x8e>
	...

08007638 <_printf_i>:
 8007638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800763c:	7e0f      	ldrb	r7, [r1, #24]
 800763e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007640:	2f78      	cmp	r7, #120	@ 0x78
 8007642:	4691      	mov	r9, r2
 8007644:	4680      	mov	r8, r0
 8007646:	460c      	mov	r4, r1
 8007648:	469a      	mov	sl, r3
 800764a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800764e:	d807      	bhi.n	8007660 <_printf_i+0x28>
 8007650:	2f62      	cmp	r7, #98	@ 0x62
 8007652:	d80a      	bhi.n	800766a <_printf_i+0x32>
 8007654:	2f00      	cmp	r7, #0
 8007656:	f000 80d2 	beq.w	80077fe <_printf_i+0x1c6>
 800765a:	2f58      	cmp	r7, #88	@ 0x58
 800765c:	f000 80b9 	beq.w	80077d2 <_printf_i+0x19a>
 8007660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007668:	e03a      	b.n	80076e0 <_printf_i+0xa8>
 800766a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800766e:	2b15      	cmp	r3, #21
 8007670:	d8f6      	bhi.n	8007660 <_printf_i+0x28>
 8007672:	a101      	add	r1, pc, #4	@ (adr r1, 8007678 <_printf_i+0x40>)
 8007674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007678:	080076d1 	.word	0x080076d1
 800767c:	080076e5 	.word	0x080076e5
 8007680:	08007661 	.word	0x08007661
 8007684:	08007661 	.word	0x08007661
 8007688:	08007661 	.word	0x08007661
 800768c:	08007661 	.word	0x08007661
 8007690:	080076e5 	.word	0x080076e5
 8007694:	08007661 	.word	0x08007661
 8007698:	08007661 	.word	0x08007661
 800769c:	08007661 	.word	0x08007661
 80076a0:	08007661 	.word	0x08007661
 80076a4:	080077e5 	.word	0x080077e5
 80076a8:	0800770f 	.word	0x0800770f
 80076ac:	0800779f 	.word	0x0800779f
 80076b0:	08007661 	.word	0x08007661
 80076b4:	08007661 	.word	0x08007661
 80076b8:	08007807 	.word	0x08007807
 80076bc:	08007661 	.word	0x08007661
 80076c0:	0800770f 	.word	0x0800770f
 80076c4:	08007661 	.word	0x08007661
 80076c8:	08007661 	.word	0x08007661
 80076cc:	080077a7 	.word	0x080077a7
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	1d1a      	adds	r2, r3, #4
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6032      	str	r2, [r6, #0]
 80076d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076e0:	2301      	movs	r3, #1
 80076e2:	e09d      	b.n	8007820 <_printf_i+0x1e8>
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	6820      	ldr	r0, [r4, #0]
 80076e8:	1d19      	adds	r1, r3, #4
 80076ea:	6031      	str	r1, [r6, #0]
 80076ec:	0606      	lsls	r6, r0, #24
 80076ee:	d501      	bpl.n	80076f4 <_printf_i+0xbc>
 80076f0:	681d      	ldr	r5, [r3, #0]
 80076f2:	e003      	b.n	80076fc <_printf_i+0xc4>
 80076f4:	0645      	lsls	r5, r0, #25
 80076f6:	d5fb      	bpl.n	80076f0 <_printf_i+0xb8>
 80076f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	da03      	bge.n	8007708 <_printf_i+0xd0>
 8007700:	232d      	movs	r3, #45	@ 0x2d
 8007702:	426d      	negs	r5, r5
 8007704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007708:	4859      	ldr	r0, [pc, #356]	@ (8007870 <_printf_i+0x238>)
 800770a:	230a      	movs	r3, #10
 800770c:	e011      	b.n	8007732 <_printf_i+0xfa>
 800770e:	6821      	ldr	r1, [r4, #0]
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	0608      	lsls	r0, r1, #24
 8007714:	f853 5b04 	ldr.w	r5, [r3], #4
 8007718:	d402      	bmi.n	8007720 <_printf_i+0xe8>
 800771a:	0649      	lsls	r1, r1, #25
 800771c:	bf48      	it	mi
 800771e:	b2ad      	uxthmi	r5, r5
 8007720:	2f6f      	cmp	r7, #111	@ 0x6f
 8007722:	4853      	ldr	r0, [pc, #332]	@ (8007870 <_printf_i+0x238>)
 8007724:	6033      	str	r3, [r6, #0]
 8007726:	bf14      	ite	ne
 8007728:	230a      	movne	r3, #10
 800772a:	2308      	moveq	r3, #8
 800772c:	2100      	movs	r1, #0
 800772e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007732:	6866      	ldr	r6, [r4, #4]
 8007734:	60a6      	str	r6, [r4, #8]
 8007736:	2e00      	cmp	r6, #0
 8007738:	bfa2      	ittt	ge
 800773a:	6821      	ldrge	r1, [r4, #0]
 800773c:	f021 0104 	bicge.w	r1, r1, #4
 8007740:	6021      	strge	r1, [r4, #0]
 8007742:	b90d      	cbnz	r5, 8007748 <_printf_i+0x110>
 8007744:	2e00      	cmp	r6, #0
 8007746:	d04b      	beq.n	80077e0 <_printf_i+0x1a8>
 8007748:	4616      	mov	r6, r2
 800774a:	fbb5 f1f3 	udiv	r1, r5, r3
 800774e:	fb03 5711 	mls	r7, r3, r1, r5
 8007752:	5dc7      	ldrb	r7, [r0, r7]
 8007754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007758:	462f      	mov	r7, r5
 800775a:	42bb      	cmp	r3, r7
 800775c:	460d      	mov	r5, r1
 800775e:	d9f4      	bls.n	800774a <_printf_i+0x112>
 8007760:	2b08      	cmp	r3, #8
 8007762:	d10b      	bne.n	800777c <_printf_i+0x144>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	07df      	lsls	r7, r3, #31
 8007768:	d508      	bpl.n	800777c <_printf_i+0x144>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	6861      	ldr	r1, [r4, #4]
 800776e:	4299      	cmp	r1, r3
 8007770:	bfde      	ittt	le
 8007772:	2330      	movle	r3, #48	@ 0x30
 8007774:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007778:	f106 36ff 	addle.w	r6, r6, #4294967295
 800777c:	1b92      	subs	r2, r2, r6
 800777e:	6122      	str	r2, [r4, #16]
 8007780:	f8cd a000 	str.w	sl, [sp]
 8007784:	464b      	mov	r3, r9
 8007786:	aa03      	add	r2, sp, #12
 8007788:	4621      	mov	r1, r4
 800778a:	4640      	mov	r0, r8
 800778c:	f7ff fee6 	bl	800755c <_printf_common>
 8007790:	3001      	adds	r0, #1
 8007792:	d14a      	bne.n	800782a <_printf_i+0x1f2>
 8007794:	f04f 30ff 	mov.w	r0, #4294967295
 8007798:	b004      	add	sp, #16
 800779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	f043 0320 	orr.w	r3, r3, #32
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	4833      	ldr	r0, [pc, #204]	@ (8007874 <_printf_i+0x23c>)
 80077a8:	2778      	movs	r7, #120	@ 0x78
 80077aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	6831      	ldr	r1, [r6, #0]
 80077b2:	061f      	lsls	r7, r3, #24
 80077b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80077b8:	d402      	bmi.n	80077c0 <_printf_i+0x188>
 80077ba:	065f      	lsls	r7, r3, #25
 80077bc:	bf48      	it	mi
 80077be:	b2ad      	uxthmi	r5, r5
 80077c0:	6031      	str	r1, [r6, #0]
 80077c2:	07d9      	lsls	r1, r3, #31
 80077c4:	bf44      	itt	mi
 80077c6:	f043 0320 	orrmi.w	r3, r3, #32
 80077ca:	6023      	strmi	r3, [r4, #0]
 80077cc:	b11d      	cbz	r5, 80077d6 <_printf_i+0x19e>
 80077ce:	2310      	movs	r3, #16
 80077d0:	e7ac      	b.n	800772c <_printf_i+0xf4>
 80077d2:	4827      	ldr	r0, [pc, #156]	@ (8007870 <_printf_i+0x238>)
 80077d4:	e7e9      	b.n	80077aa <_printf_i+0x172>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	f023 0320 	bic.w	r3, r3, #32
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	e7f6      	b.n	80077ce <_printf_i+0x196>
 80077e0:	4616      	mov	r6, r2
 80077e2:	e7bd      	b.n	8007760 <_printf_i+0x128>
 80077e4:	6833      	ldr	r3, [r6, #0]
 80077e6:	6825      	ldr	r5, [r4, #0]
 80077e8:	6961      	ldr	r1, [r4, #20]
 80077ea:	1d18      	adds	r0, r3, #4
 80077ec:	6030      	str	r0, [r6, #0]
 80077ee:	062e      	lsls	r6, r5, #24
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	d501      	bpl.n	80077f8 <_printf_i+0x1c0>
 80077f4:	6019      	str	r1, [r3, #0]
 80077f6:	e002      	b.n	80077fe <_printf_i+0x1c6>
 80077f8:	0668      	lsls	r0, r5, #25
 80077fa:	d5fb      	bpl.n	80077f4 <_printf_i+0x1bc>
 80077fc:	8019      	strh	r1, [r3, #0]
 80077fe:	2300      	movs	r3, #0
 8007800:	6123      	str	r3, [r4, #16]
 8007802:	4616      	mov	r6, r2
 8007804:	e7bc      	b.n	8007780 <_printf_i+0x148>
 8007806:	6833      	ldr	r3, [r6, #0]
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	6032      	str	r2, [r6, #0]
 800780c:	681e      	ldr	r6, [r3, #0]
 800780e:	6862      	ldr	r2, [r4, #4]
 8007810:	2100      	movs	r1, #0
 8007812:	4630      	mov	r0, r6
 8007814:	f7f8 fce4 	bl	80001e0 <memchr>
 8007818:	b108      	cbz	r0, 800781e <_printf_i+0x1e6>
 800781a:	1b80      	subs	r0, r0, r6
 800781c:	6060      	str	r0, [r4, #4]
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	2300      	movs	r3, #0
 8007824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007828:	e7aa      	b.n	8007780 <_printf_i+0x148>
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	4632      	mov	r2, r6
 800782e:	4649      	mov	r1, r9
 8007830:	4640      	mov	r0, r8
 8007832:	47d0      	blx	sl
 8007834:	3001      	adds	r0, #1
 8007836:	d0ad      	beq.n	8007794 <_printf_i+0x15c>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	079b      	lsls	r3, r3, #30
 800783c:	d413      	bmi.n	8007866 <_printf_i+0x22e>
 800783e:	68e0      	ldr	r0, [r4, #12]
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	4298      	cmp	r0, r3
 8007844:	bfb8      	it	lt
 8007846:	4618      	movlt	r0, r3
 8007848:	e7a6      	b.n	8007798 <_printf_i+0x160>
 800784a:	2301      	movs	r3, #1
 800784c:	4632      	mov	r2, r6
 800784e:	4649      	mov	r1, r9
 8007850:	4640      	mov	r0, r8
 8007852:	47d0      	blx	sl
 8007854:	3001      	adds	r0, #1
 8007856:	d09d      	beq.n	8007794 <_printf_i+0x15c>
 8007858:	3501      	adds	r5, #1
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	9903      	ldr	r1, [sp, #12]
 800785e:	1a5b      	subs	r3, r3, r1
 8007860:	42ab      	cmp	r3, r5
 8007862:	dcf2      	bgt.n	800784a <_printf_i+0x212>
 8007864:	e7eb      	b.n	800783e <_printf_i+0x206>
 8007866:	2500      	movs	r5, #0
 8007868:	f104 0619 	add.w	r6, r4, #25
 800786c:	e7f5      	b.n	800785a <_printf_i+0x222>
 800786e:	bf00      	nop
 8007870:	08007e01 	.word	0x08007e01
 8007874:	08007e12 	.word	0x08007e12

08007878 <memmove>:
 8007878:	4288      	cmp	r0, r1
 800787a:	b510      	push	{r4, lr}
 800787c:	eb01 0402 	add.w	r4, r1, r2
 8007880:	d902      	bls.n	8007888 <memmove+0x10>
 8007882:	4284      	cmp	r4, r0
 8007884:	4623      	mov	r3, r4
 8007886:	d807      	bhi.n	8007898 <memmove+0x20>
 8007888:	1e43      	subs	r3, r0, #1
 800788a:	42a1      	cmp	r1, r4
 800788c:	d008      	beq.n	80078a0 <memmove+0x28>
 800788e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007896:	e7f8      	b.n	800788a <memmove+0x12>
 8007898:	4402      	add	r2, r0
 800789a:	4601      	mov	r1, r0
 800789c:	428a      	cmp	r2, r1
 800789e:	d100      	bne.n	80078a2 <memmove+0x2a>
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078aa:	e7f7      	b.n	800789c <memmove+0x24>

080078ac <memcpy>:
 80078ac:	440a      	add	r2, r1
 80078ae:	4291      	cmp	r1, r2
 80078b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80078b4:	d100      	bne.n	80078b8 <memcpy+0xc>
 80078b6:	4770      	bx	lr
 80078b8:	b510      	push	{r4, lr}
 80078ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078c2:	4291      	cmp	r1, r2
 80078c4:	d1f9      	bne.n	80078ba <memcpy+0xe>
 80078c6:	bd10      	pop	{r4, pc}

080078c8 <_realloc_r>:
 80078c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078cc:	4680      	mov	r8, r0
 80078ce:	4615      	mov	r5, r2
 80078d0:	460c      	mov	r4, r1
 80078d2:	b921      	cbnz	r1, 80078de <_realloc_r+0x16>
 80078d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078d8:	4611      	mov	r1, r2
 80078da:	f7ff bbad 	b.w	8007038 <_malloc_r>
 80078de:	b92a      	cbnz	r2, 80078ec <_realloc_r+0x24>
 80078e0:	f7ff fc9a 	bl	8007218 <_free_r>
 80078e4:	2400      	movs	r4, #0
 80078e6:	4620      	mov	r0, r4
 80078e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ec:	f000 f81a 	bl	8007924 <_malloc_usable_size_r>
 80078f0:	4285      	cmp	r5, r0
 80078f2:	4606      	mov	r6, r0
 80078f4:	d802      	bhi.n	80078fc <_realloc_r+0x34>
 80078f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80078fa:	d8f4      	bhi.n	80078e6 <_realloc_r+0x1e>
 80078fc:	4629      	mov	r1, r5
 80078fe:	4640      	mov	r0, r8
 8007900:	f7ff fb9a 	bl	8007038 <_malloc_r>
 8007904:	4607      	mov	r7, r0
 8007906:	2800      	cmp	r0, #0
 8007908:	d0ec      	beq.n	80078e4 <_realloc_r+0x1c>
 800790a:	42b5      	cmp	r5, r6
 800790c:	462a      	mov	r2, r5
 800790e:	4621      	mov	r1, r4
 8007910:	bf28      	it	cs
 8007912:	4632      	movcs	r2, r6
 8007914:	f7ff ffca 	bl	80078ac <memcpy>
 8007918:	4621      	mov	r1, r4
 800791a:	4640      	mov	r0, r8
 800791c:	f7ff fc7c 	bl	8007218 <_free_r>
 8007920:	463c      	mov	r4, r7
 8007922:	e7e0      	b.n	80078e6 <_realloc_r+0x1e>

08007924 <_malloc_usable_size_r>:
 8007924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007928:	1f18      	subs	r0, r3, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfbc      	itt	lt
 800792e:	580b      	ldrlt	r3, [r1, r0]
 8007930:	18c0      	addlt	r0, r0, r3
 8007932:	4770      	bx	lr

08007934 <_init>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	bf00      	nop
 8007938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793a:	bc08      	pop	{r3}
 800793c:	469e      	mov	lr, r3
 800793e:	4770      	bx	lr

08007940 <_fini>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	bf00      	nop
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr
